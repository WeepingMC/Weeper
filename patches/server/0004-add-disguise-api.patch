From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yannick Lamprecht <yannicklamprecht@live.de>
Date: Sat, 16 Mar 2024 22:58:19 +0100
Subject: [PATCH] add disguise api


diff --git a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
index b6f4400df3d8ec7e06a996de54f8cabba57885e1..23a6026dda4ce5befa1d5e78b0434c2738555ff9 100644
--- a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
+++ b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
@@ -71,4 +71,81 @@ public class PaperSkinParts implements SkinParts {
             .add("hats=" + hasHatsEnabled())
             .toString();
     }
+
+    public static SkinParts.Builder builder(){
+        return new Builder();
+    }
+
+    public static class Builder implements SkinParts.Builder {
+
+        private boolean cape;
+        private boolean jacket;
+        private boolean leftSleeve;
+        private boolean rightSleeve;
+        private boolean leftPants;
+        private boolean rightPants;
+        private boolean hats;
+
+        private static final int CAPE = 0x01;
+        private static final int JACKET = 0x02;
+        private static final int LEFT_SLEEVE = 0x04;
+        private static final int RIGHT_SLEEVE = 0x08;
+        private static final int LEFT_PANTS = 0x10;
+        private static final int RIGHT_PANTS = 0x20;
+        private static final int HAT = 0x40;
+
+        @Override
+        public @org.jetbrains.annotations.NotNull Builder withCape(boolean cape) {
+            this.cape = cape;
+            return this;
+        }
+
+        @Override
+        public @org.jetbrains.annotations.NotNull Builder withJacket(boolean jacket) {
+            this.jacket = jacket;
+            return this;
+        }
+
+        @Override
+        public @org.jetbrains.annotations.NotNull Builder withLeftSleeve(boolean leftSleeve) {
+            this.leftSleeve = leftSleeve;
+            return this;
+        }
+
+        @Override
+        public @org.jetbrains.annotations.NotNull Builder withRightSleeve(boolean rightSleeve) {
+            this.rightSleeve = rightSleeve;
+            return this;
+        }
+
+        @Override
+        public @org.jetbrains.annotations.NotNull Builder withLeftPants(boolean leftPants) {
+            this.leftPants = leftPants;
+            return this;
+        }
+
+        @Override
+        public @org.jetbrains.annotations.NotNull Builder withRightPants(boolean rightPants) {
+            this.rightPants = rightPants;
+            return this;
+        }
+
+        @Override
+        public @org.jetbrains.annotations.NotNull Builder withHat(boolean hat) {
+            this.hats = hat;
+            return this;
+        }
+
+        public @org.jetbrains.annotations.NotNull SkinParts build() {
+            int raw = 0;
+            if (cape) raw |= CAPE;
+            if (jacket) raw |= JACKET;
+            if (leftSleeve) raw |= LEFT_SLEEVE;
+            if (rightSleeve) raw |= RIGHT_SLEEVE;
+            if (leftPants) raw |= LEFT_PANTS;
+            if (rightPants) raw |= RIGHT_PANTS;
+            if (hats) raw |= HAT;
+            return new PaperSkinParts(raw);
+        }
+    }
 }
diff --git a/src/main/java/io/papermc/paper/disguise/DisguiseUtil.java b/src/main/java/io/papermc/paper/disguise/DisguiseUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..f591aec5a8525a7f1c3c329d357f0bb0b199c0be
--- /dev/null
+++ b/src/main/java/io/papermc/paper/disguise/DisguiseUtil.java
@@ -0,0 +1,110 @@
+package io.papermc.paper.disguise;
+
+import com.destroystokyo.paper.profile.CraftPlayerProfile;
+import com.destroystokyo.paper.profile.PlayerProfile;
+import java.util.EnumSet;
+import java.util.List;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoRemovePacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket;
+import net.minecraft.network.syncher.EntityDataAccessor;
+import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.phys.Vec3;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftEntityType;
+
+import static net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket.Action;
+import static net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket.Entry;
+
+public final class DisguiseUtil {
+    private DisguiseUtil(){}
+
+    public static boolean tryDisguise(ServerPlayer player, Entity entity, Packet<?> packet) {
+            if(!(packet instanceof ClientboundAddEntityPacket clientboundAddEntityPacket)) {
+                return false;
+            }
+            return switch (entity.getBukkitEntity().getDisguiseData()) {
+                case DisguiseData.OriginalDisguise disguise -> false;
+                case io.papermc.paper.disguise.EntityTypeDisguise(var type) -> {
+                    player.connection.send(create(clientboundAddEntityPacket, CraftEntityType.bukkitToMinecraft(type)));
+                    yield  true;
+                }
+                case PlayerDisguise(var playerProfile, var listed, var skinParts) -> {
+                    PlayerProfile adapted = Bukkit.createProfile(entity.getUUID(), playerProfile.getName());
+                    adapted.setProperties(playerProfile.getProperties());
+                    Entry playerUpdate = new Entry(
+                            entity.getUUID(),
+                            CraftPlayerProfile.asAuthlibCopy(adapted),
+                            listed,
+                            0,
+                            net.minecraft.world.level.GameType.DEFAULT_MODE,
+                            entity.getCustomName(),
+                            0,
+                            null
+                        );
+                    player.connection.send(new ClientboundPlayerInfoUpdatePacket(EnumSet.of(Action.ADD_PLAYER), playerUpdate));
+                    player.connection.send(new ClientboundPlayerInfoUpdatePacket(EnumSet.of(Action.UPDATE_LISTED), playerUpdate));
+                    player.connection.send(create(clientboundAddEntityPacket, net.minecraft.world.entity.EntityType.PLAYER));
+                    if(skinParts != null) {
+                        player.connection.send(new net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket(
+                            clientboundAddEntityPacket.getId(),
+                            List.of(new SynchedEntityData.DataItem<>(Player.DATA_PLAYER_MODE_CUSTOMISATION, (byte) skinParts.getRaw()).value())
+                        ));
+                    }
+                    yield  true;
+                }
+            };
+    }
+
+    /*
+     * Only player disguise needs to be handled specially
+     * because the client doesn't forget the player profile otherwise.
+     * This would result in player being kicked cause the entities type mismatches the previously disguised one.
+     */
+    public static void tryDespawn(ServerPlayer player, Entity entity) {
+        if(entity.getBukkitEntity().getDisguiseData() instanceof PlayerDisguise) {
+            player.connection.send(new ClientboundPlayerInfoRemovePacket(List.of(entity.getUUID())));
+        }
+    }
+
+    private static ClientboundAddEntityPacket create(ClientboundAddEntityPacket packet, EntityType<?> entityType) {
+        return new net.minecraft.network.protocol.game.ClientboundAddEntityPacket(
+            packet.getId(),
+            packet.getUUID(),
+            packet.getX(),
+            packet.getY(),
+            packet.getZ(),
+            packet.getXRot(),
+            packet.getYRot(),
+            entityType,
+            0,
+            Vec3.ZERO.add(packet.getX(), packet.getY(), packet.getZ()).scale(1/8000.0D),
+            packet.getYHeadRot()
+        );
+    }
+
+
+    /*
+     * Is used to skip entity meta that doesn't fit the disguised type.
+     * e.g. Player having a float at index 15 (additional hearts) and the server side entity is an Armorstand
+     * that has a byte at that index.
+     */
+    public static boolean shouldSkip(Entity entity, EntityDataAccessor<?> dataAccessor) {
+        return switch (entity.getBukkitEntity().getDisguiseData()) {
+            case DisguiseData.OriginalDisguise original -> false;
+            case EntityTypeDisguise entityTypeDisguise -> !io.papermc.paper.entity.meta.EntityMetaWatcher.isValidForClass(
+                CraftEntityType.bukkitToMinecraft(entityTypeDisguise.entityType()).getBaseClass(),
+                dataAccessor
+            );
+            case PlayerDisguise playerDisguise -> !io.papermc.paper.entity.meta.EntityMetaWatcher.isValidForClass(
+                ServerPlayer.class,
+                dataAccessor
+            );
+        };
+    }
+}
diff --git a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
index 0f99733660f91280e4c6262cf75b3c9cae86f65a..c49606b5f8e459a1574c3111c10f2c66c0888f87 100644
--- a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
@@ -100,6 +100,7 @@ public class SynchedEntityData {
 
                 if (datawatcher_item.isDirty()) {
                     datawatcher_item.setDirty(false);
+                    if (io.papermc.paper.disguise.DisguiseUtil.shouldSkip((net.minecraft.world.entity.Entity) entity, datawatcher_item.getAccessor())) continue; // Paper - disguise api
                     list.add(datawatcher_item.value());
                 }
             }
@@ -117,6 +118,7 @@ public class SynchedEntityData {
         for (int j = 0; j < i; ++j) {
             SynchedEntityData.DataItem<?> datawatcher_item = adatawatcher_item[j];
 
+            if (io.papermc.paper.disguise.DisguiseUtil.shouldSkip((net.minecraft.world.entity.Entity) entity, datawatcher_item.getAccessor())) continue; // Paper - disguise api
             if (!datawatcher_item.isSetToDefault()) {
                 if (list == null) {
                     list = new ArrayList();
@@ -136,6 +138,7 @@ public class SynchedEntityData {
             SynchedEntityData.DataValue<?> datawatcher_c = (SynchedEntityData.DataValue) iterator.next();
             SynchedEntityData.DataItem<?> datawatcher_item = this.itemsById[datawatcher_c.id];
 
+            if (io.papermc.paper.disguise.DisguiseUtil.shouldSkip((net.minecraft.world.entity.Entity) entity, datawatcher_item.getAccessor())) continue; // Paper - disguise api
             this.assignValue(datawatcher_item, datawatcher_c);
             this.entity.onSyncedDataUpdated(datawatcher_item.getAccessor());
         }
@@ -158,6 +161,7 @@ public class SynchedEntityData {
     public List<SynchedEntityData.DataValue<?>> packAll() {
         final List<SynchedEntityData.DataValue<?>> list = new ArrayList<>();
         for (final DataItem<?> dataItem : this.itemsById) {
+            if (io.papermc.paper.disguise.DisguiseUtil.shouldSkip((net.minecraft.world.entity.Entity) entity, dataItem.getAccessor())) continue; // Paper - disguise api
             list.add(dataItem.value());
         }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 5bbc7ceaafc163f12344e5d5d355ad2ff30ddca2..4c9615d7c72598e57a138e2fae5530eccf6ef292 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -326,6 +326,7 @@ public class ServerEntity {
 
     public void removePairing(ServerPlayer player) {
         this.entity.stopSeenByPlayer(player);
+        io.papermc.paper.disguise.DisguiseUtil.tryDespawn(player, this.entity); // Paper - disguise api
         player.connection.send(new ClientboundRemoveEntitiesPacket(new int[]{this.entity.getId()}));
     }
 
@@ -348,7 +349,11 @@ public class ServerEntity {
 
         Packet<ClientGamePacketListener> packet = this.entity.getAddEntityPacket(this);
 
-        sender.accept(packet);
+        // Paper start - disguise api
+        if(!io.papermc.paper.disguise.DisguiseUtil.tryDisguise(player, entity, packet)){
+            sender.accept(packet);
+        }
+        // Paper end - disguise api
         if (this.trackedDataValues != null) {
             sender.accept(new ClientboundSetEntityDataPacket(this.entity.getId(), this.trackedDataValues));
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a34e40e273a79a234c3d79b6ad360ce3a4d35ba3..0165f19fda3ccef03cae9cf260b19f91d765c2f5 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -382,6 +382,12 @@ public final class CraftServer implements Server {
         return ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandleRaw());
     }
     // Paper end - Folia reagion threading API
+    // Paper start - add disguise api
+    @Override
+    public com.destroystokyo.paper.SkinParts.@org.jetbrains.annotations.NotNull Builder newSkinPartsBuilder() {
+        return com.destroystokyo.paper.PaperSkinParts.builder();
+    }
+    // Paper end - add disguise api
 
     static {
         ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 179886dcbda29c5cdb7dbd43e44951ae38d9df96..cf9c3be8e574024178c2557c0dfbcd3943d21108 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1311,4 +1311,16 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         }
     }
     // Paper end - broadcast hurt animation
+    // Paper start - disguise api
+    private io.papermc.paper.disguise.DisguiseData disguiseData = io.papermc.paper.disguise.DisguiseData.original();
+    @Override
+    public @org.jetbrains.annotations.NotNull io.papermc.paper.disguise.DisguiseData getDisguiseData() {
+        return disguiseData;
+    }
+
+    @Override
+    public void setDisguiseData(@org.jetbrains.annotations.NotNull io.papermc.paper.disguise.DisguiseData disguiseData) {
+        this.disguiseData = disguiseData;
+    }
+    // Paper end - disguise api
 }
