From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yannick Lamprecht <yannicklamprecht@live.de>
Date: Sat, 19 Jun 2021 15:47:34 +0200
Subject: [PATCH] packet support


diff --git a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
index b6f4400df3d8ec7e06a996de54f8cabba57885e1..551b3a710d84c6aba29a8a69162ce61a3c0f05d9 100644
--- a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
+++ b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
@@ -71,4 +71,59 @@ public class PaperSkinParts implements SkinParts {
             .add("hats=" + hasHatsEnabled())
             .toString();
     }
+
+    public static SkinParts.Builder builder(){
+        return new Builder();
+    }
+
+    public static class Builder implements SkinParts.Builder{
+        private int raw = 0;
+
+        private static final int CAPE = 0x01;
+        private static final int JACKET = 0x02;
+        private static final int LEFT_SLEEVE = 0x04;
+        private static final int RIGHT_SLEEVE = 0x08;
+        private static final int LEFT_PANTS = 0x10;
+        private static final int RIGHT_PANTS = 0x20;
+        private static final int HAT = 0x40;
+
+        public Builder withCape(){
+            raw |= CAPE;
+            return this;
+        }
+
+        public Builder withJacket(){
+            raw |= JACKET;
+            return this;
+        }
+
+        public Builder withLeftSleeve(){
+            raw |= LEFT_SLEEVE;
+            return this;
+        }
+
+        public Builder withRightSleeve(){
+            raw |= RIGHT_SLEEVE;
+            return this;
+        }
+
+        public Builder withLeftPants(){
+            raw |= LEFT_PANTS;
+            return this;
+        }
+
+        public Builder withRightPants(){
+            raw |= RIGHT_PANTS;
+            return this;
+        }
+
+        public Builder withHat(){
+            raw |= HAT;
+            return this;
+        }
+
+        public SkinParts build(){
+            return new PaperSkinParts(raw);
+        }
+    }
 }
diff --git a/src/main/java/com/github/weepingmc/packet/ChainablePacketStep.java b/src/main/java/com/github/weepingmc/packet/ChainablePacketStep.java
new file mode 100644
index 0000000000000000000000000000000000000000..270f90c81b77732cf2db947d74aa23c29e24b670
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/packet/ChainablePacketStep.java
@@ -0,0 +1,97 @@
+package com.github.weepingmc.packet;
+
+import net.minecraft.network.protocol.Packet;
+
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Collection;
+import java.util.concurrent.TimeUnit;
+
+import javax.annotation.Nonnull;
+
+public class ChainablePacketStep implements PacketStep {
+
+    protected ChainablePacketStep next;
+    private final PacketStep current;
+
+    public ChainablePacketStep(){
+        this.current = null;
+    }
+    public ChainablePacketStep(PacketStep current) {
+        this.current = current;
+    }
+
+    public void setNext(@Nonnull ChainablePacketStep next) {
+        if (this.next == null) {
+            this.next = next;
+        } else {
+            this.next.setNext(next);
+        }
+    }
+
+    protected void executeNext(@Nonnull Collection<? extends Player> players) {
+        if (next != null) {
+            next.execute(players);
+        }
+    }
+
+    public final void execute(@Nonnull Collection<? extends Player> players) {
+        executeAll(players);
+        executeNext(players);
+    }
+
+    protected void executeAll(@Nonnull Collection<? extends Player> players) {
+        for (Player player : players) {
+            execute(player);
+        }
+    }
+
+    @Override
+    public void execute(@Nonnull Player player) {
+        if(current != null) current.execute(player);
+    }
+
+    public static class NmsPacketStep implements PacketStep {
+
+        private final Packet<?> packet;
+
+        public NmsPacketStep(Packet<?> packet) {
+            this.packet = packet;
+        }
+
+        @Override
+        public void execute(@Nonnull Player player) {
+            sendPacket(player, packet);
+        }
+
+        private void sendPacket(Player player, Packet<?> packet) {
+            ((CraftPlayer) player).getHandle().connection.send(packet);
+        }
+    }
+
+    public static class DelayPacketStep extends ChainablePacketStep {
+
+        private final JavaPlugin javaPlugin;
+        private final long delay;
+        private final TimeUnit timeUnit;
+
+        public DelayPacketStep(@Nonnull JavaPlugin javaPlugin, long delay,
+            @Nonnull TimeUnit timeUnit) {
+            super();
+            this.javaPlugin = javaPlugin;
+            this.delay = delay;
+            this.timeUnit = timeUnit;
+        }
+
+        @Override
+        protected void executeNext(@NotNull Collection<? extends Player> players) {
+            Bukkit.getScheduler().runTaskLater(javaPlugin, () -> {
+                super.executeNext(players);
+            }, 20 * timeUnit.toSeconds(delay));
+        }
+    }
+}
diff --git a/src/main/java/com/github/weepingmc/packet/CraftEntityMetaBuilder.java b/src/main/java/com/github/weepingmc/packet/CraftEntityMetaBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..9cba5680d8226cfaab9cdf024a3edc6cfa077353
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/packet/CraftEntityMetaBuilder.java
@@ -0,0 +1,49 @@
+package com.github.weepingmc.packet;
+
+import static com.github.weepingmc.packet.CraftPacketConversion.mapStatus;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Optional;
+import java.util.Set;
+
+import javax.annotation.Nonnull;
+
+import com.destroystokyo.paper.SkinParts;
+
+import com.github.weepingmc.packet.options.EntityMetaBuilder;
+import com.github.weepingmc.packet.options.EntityStatus;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.player.Player;
+
+public class CraftEntityMetaBuilder implements EntityMetaBuilder {
+
+    private final List<SynchedEntityData.DataItem<?>> dataWatcherList = new ArrayList<>();
+
+    public List<SynchedEntityData.DataItem<?>> build() {
+        return new ArrayList<>(dataWatcherList);
+    }
+
+    @Override
+    public @Nonnull EntityMetaBuilder withEntityStatus(@Nonnull Set<EntityStatus> entityStatus) {
+        dataWatcherList.add(new SynchedEntityData.DataItem<>(Entity.DATA_SHARED_FLAGS_ID, mapStatus(entityStatus)));
+        return this;
+    }
+
+    public @Nonnull EntityMetaBuilder withSkinParts(@Nonnull SkinParts skinParts) {
+        dataWatcherList.add(new SynchedEntityData.DataItem<>(Player.DATA_PLAYER_MODE_CUSTOMISATION, (byte)skinParts.getRaw()));
+        return this;
+    }
+
+    @Override
+    public @Nonnull EntityMetaBuilder withCustomName(@Nonnull BaseComponent[] baseComponents) {
+        SynchedEntityData.DataItem<Optional<Component>> chat = new SynchedEntityData.DataItem<>(Entity.DATA_CUSTOM_NAME,
+                Optional.ofNullable(net.minecraft.network.chat.BaseComponent.Serializer.fromJson(net.md_5.bungee.chat.ComponentSerializer.toString(baseComponents))));
+        dataWatcherList.add(chat);
+        dataWatcherList.add(new SynchedEntityData.DataItem<>(Entity.DATA_CUSTOM_NAME_VISIBLE, true));
+        return this;
+    }
+}
diff --git a/src/main/java/com/github/weepingmc/packet/CraftPacketConversion.java b/src/main/java/com/github/weepingmc/packet/CraftPacketConversion.java
new file mode 100644
index 0000000000000000000000000000000000000000..c30f5dbbbe407e40bd22cc77051906ef47dd717a
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/packet/CraftPacketConversion.java
@@ -0,0 +1,102 @@
+package com.github.weepingmc.packet;
+
+import java.util.ArrayList;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Set;
+
+import com.mojang.datafixers.util.Pair;
+
+import com.github.weepingmc.packet.options.Animation;
+import com.github.weepingmc.packet.options.EntityStatus;
+import com.github.weepingmc.packet.options.PlayerAbility;
+import com.github.weepingmc.packet.options.ProfileAction;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket.Action;
+import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.player.Abilities;
+import net.minecraft.world.item.ItemStack;
+
+public final class CraftPacketConversion {
+
+    private CraftPacketConversion() {
+    }
+
+    static Action from(ProfileAction action) {
+        switch (action) {
+            case ADD_PLAYER:
+                return Action.ADD_PLAYER;
+            case REMOVE_PLAYER:
+                return Action.REMOVE_PLAYER;
+            case UPDATE_LATENCY:
+                return Action.UPDATE_LATENCY;
+            case UPDATE_GAME_MODE:
+                return Action.UPDATE_GAME_MODE;
+            case UPDATE_DISPLAY_NAME:
+                return Action.UPDATE_DISPLAY_NAME;
+        }
+        throw new UnsupportedOperationException("Invalid case!");
+    }
+
+    static EquipmentSlot from(org.bukkit.inventory.EquipmentSlot equipmentSlot) {
+        return switch (equipmentSlot) {
+            case HAND -> EquipmentSlot.MAINHAND;
+            case OFF_HAND -> EquipmentSlot.OFFHAND;
+            case FEET -> EquipmentSlot.FEET;
+            case LEGS -> EquipmentSlot.LEGS;
+            case CHEST -> EquipmentSlot.CHEST;
+            case HEAD -> EquipmentSlot.HEAD;
+        };
+    }
+
+    static List<Pair<EquipmentSlot, ItemStack>> from(
+        EnumMap<org.bukkit.inventory.EquipmentSlot, org.bukkit.inventory.ItemStack> equipment) {
+        List<Pair<EquipmentSlot, ItemStack>> pairList = new ArrayList<>();
+        equipment.forEach((equipmentSlot, itemStack) -> {
+            pairList.add(new Pair<>(from(equipmentSlot), org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(itemStack)));
+        });
+        return pairList;
+    }
+
+    static byte mapStatus(Set<EntityStatus> entityStatuses) {
+
+        byte status = 0;
+
+        for (EntityStatus entityStatus : entityStatuses) {
+            switch (entityStatus) {
+                case IS_ON_FIRE -> status |= 0x01;
+                case IS_CROUCHING -> status |= 0x02;
+                case IS_SPRINTING -> status |= 0x08;
+                case IS_SWIMMING -> status |= 0x10;
+                case IS_INVISIBLE -> status |= 0x20;
+                case HAS_GLOWING_EFFECT -> status |= 0x40;
+                case IS_FLYING_WITH_ELYTRA -> status |= 0x80;
+            }
+        }
+        return status;
+    }
+
+    static int fromAnimation(Animation animation) {
+        return switch (animation) {
+            case SWING_MAIN_ARM -> 0;
+            case TAKE_DAMAGE -> 1;
+            case LEAVE_BED -> 2;
+            case SWING_OFFHAND -> 3;
+            case CRITICAL_EFFECT -> 4;
+            case MAGIC_CRITICAL_EFFECT -> 5;
+        };
+    }
+
+    static Abilities mapPlayerAbilities(Set<PlayerAbility> playerAbilities) {
+        Abilities playerAbilitiesNMS = new Abilities();
+
+        for (PlayerAbility playerAbilitiy : playerAbilities) {
+            switch (playerAbilitiy) {
+                case INVULNERABLE -> playerAbilitiesNMS.invulnerable = true;
+                case FLYING -> playerAbilitiesNMS.flying = true;
+                case ALLOW_FLYING -> playerAbilitiesNMS.mayfly = true;
+                case CREATIVE_MODE_INSTANT_BREAK -> playerAbilitiesNMS.instabuild = true;
+            }
+        }
+        return playerAbilitiesNMS;
+    }
+}
diff --git a/src/main/java/com/github/weepingmc/packet/CraftPacketPipeline.java b/src/main/java/com/github/weepingmc/packet/CraftPacketPipeline.java
new file mode 100644
index 0000000000000000000000000000000000000000..6d65b30700692a9254998a94952d9938d3824811
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/packet/CraftPacketPipeline.java
@@ -0,0 +1,48 @@
+package com.github.weepingmc.packet;
+
+
+import javax.annotation.Nonnull;
+
+import org.apache.commons.lang.RandomStringUtils;
+import org.bukkit.craftbukkit.scoreboard.CraftScoreboard;
+import org.bukkit.scoreboard.Team;
+
+import com.destroystokyo.paper.PaperSkinParts;
+import com.destroystokyo.paper.SkinParts.Builder;
+
+import com.github.weepingmc.packet.options.EntityMetaBuilder;
+import net.minecraft.world.scores.Scoreboard;
+
+public class CraftPacketPipeline implements PacketPipeline {
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder create() {
+        return new CraftPacketStepBuilder();
+    }
+
+    @Override
+    @Nonnull
+    public EntityMetaBuilder createEntityMetaBuilder() {
+        return new CraftEntityMetaBuilder();
+    }
+
+    @Override
+    public Builder createSkinPartsBuilder() {
+        return PaperSkinParts.builder();
+    }
+
+    @Override
+    @Nonnull
+    public Team createTeam(@Nonnull String name) {
+        Scoreboard scoreboard = new Scoreboard();
+        CraftScoreboard craftScoreboard = new CraftScoreboard(scoreboard);
+        return craftScoreboard.registerNewTeam(name);
+    }
+
+    @Override
+    @Nonnull
+    public String generateRandomString(int count, boolean letters, boolean numbers) {
+        return RandomStringUtils.random(count, letters, numbers);
+    }
+}
diff --git a/src/main/java/com/github/weepingmc/packet/CraftPacketStepBuilder.java b/src/main/java/com/github/weepingmc/packet/CraftPacketStepBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..af7a73e3e5d83490fd71280c8ecbfcc32e69c6bc
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/packet/CraftPacketStepBuilder.java
@@ -0,0 +1,256 @@
+package com.github.weepingmc.packet;
+
+import static com.github.weepingmc.packet.CraftPacketConversion.from;
+import static com.github.weepingmc.packet.CraftPacketConversion.mapPlayerAbilities;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.Optional;
+import java.util.Set;
+import java.util.UUID;
+import java.util.concurrent.TimeUnit;
+
+import javax.annotation.Nonnull;
+
+import org.bukkit.Location;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.scoreboard.CraftTeam;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.bukkit.scoreboard.Team;
+import org.bukkit.util.Vector;
+
+import com.destroystokyo.paper.profile.CraftPlayerProfile;
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.mojang.authlib.GameProfile;
+import com.mojang.datafixers.util.Pair;
+
+import com.github.weepingmc.packet.ChainablePacketStep.DelayPacketStep;
+import com.github.weepingmc.packet.ChainablePacketStep.NmsPacketStep;
+import com.github.weepingmc.packet.options.Animation;
+import com.github.weepingmc.packet.options.EntityMetaBuilder;
+import com.github.weepingmc.packet.options.PlayerAbility;
+import com.github.weepingmc.packet.options.ProfileAction;
+import com.github.weepingmc.packet.options.TeamMode;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Registry;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
+import net.minecraft.network.protocol.game.ClientboundAddPlayerPacket;
+import net.minecraft.network.protocol.game.ClientboundAnimatePacket;
+import net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket;
+import net.minecraft.network.protocol.game.ClientboundMoveEntityPacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket;
+import net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket;
+import net.minecraft.network.protocol.game.ClientboundRotateHeadPacket;
+import net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket;
+import net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket;
+import net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket;
+import net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket.Action;
+import net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket;
+import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.player.Abilities;
+import net.minecraft.world.level.GameType;
+import net.minecraft.world.phys.Vec3;
+
+public class CraftPacketStepBuilder implements PacketStepBuilder {
+
+    private final ChainablePacketStep initial = new ChainablePacketStep();
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder sendPlayerProfile(@Nonnull PlayerProfile playerProfile, @Nonnull ProfileAction profileAction) {
+        GameProfile gameProfile = ((CraftPlayerProfile) playerProfile).getGameProfile();
+        ClientboundPlayerInfoPacket.PlayerUpdate playerUpdate = new ClientboundPlayerInfoPacket.PlayerUpdate(gameProfile, 0, GameType.DEFAULT_MODE, null);
+        ClientboundPlayerInfoPacket clientboundPlayerInfoPacket = new ClientboundPlayerInfoPacket(from(profileAction), Collections.singletonList(playerUpdate));
+        initial.setNext(of(clientboundPlayerInfoPacket));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder spawnPlayer(int entityId, @Nonnull UUID uuid, @Nonnull Location location) {
+        initial.setNext(of(new ClientboundAddPlayerPacket(entityId, uuid, location)));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder setPlayerTeam(@Nonnull Team team, @Nonnull TeamMode teamMode) {
+        var nmsTeam = ((CraftTeam)team).getHandle();
+        var packet = switch (teamMode){
+            case CREATE_TEAM, UPDATE_TEAM_INFO -> ClientboundSetPlayerTeamPacket.createAddOrModifyPacket(nmsTeam, teamMode == TeamMode.UPDATE_TEAM_INFO);
+            case REMOVE_TEAM -> ClientboundSetPlayerTeamPacket.createRemovePacket(nmsTeam);
+            case ADD_PLAYERS_TO_TEAM, REMOVE_PLAYERS_FROM_TEAM -> {
+                var operation = (teamMode == TeamMode.ADD_PLAYERS_TO_TEAM)  ?  Action.ADD: Action.REMOVE;
+                yield ClientboundSetPlayerTeamPacket.createPlayerPacket(nmsTeam, "", operation);
+            }
+        };
+        initial.setNext(of(packet));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder teleportEntity(int entityId, @Nonnull Location location, boolean onGround) {
+        ClientboundTeleportEntityPacket teleportEntityPacket = new ClientboundTeleportEntityPacket(entityId, location, onGround);
+        initial.setNext(of(teleportEntityPacket));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder sendBlockChange(@Nonnull Location location, @Nonnull BlockData blockData) {
+        initial.setNext(new ChainablePacketStep((player) -> player.sendBlockChange(location, blockData)));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder sleepAt(int entityId, @Nonnull Location location) {
+        List<SynchedEntityData.DataItem<?>> dataWatcherItems = new ArrayList<>();
+        dataWatcherItems.add(new SynchedEntityData.DataItem<>(Entity.DATA_POSE, Pose.SLEEPING));
+        dataWatcherItems.add(new SynchedEntityData.DataItem<>(LivingEntity.SLEEPING_POS_ID,
+            Optional.of(new BlockPos(location.getBlockX(), location.getY(), location.getBlockZ())))
+        );
+        ClientboundSetEntityDataPacket meta = new ClientboundSetEntityDataPacket(entityId, dataWatcherItems);
+        initial.setNext(of(meta));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder rotateHead(int entityId, float yaw) {
+        initial.setNext(of(new ClientboundRotateHeadPacket(
+                entityId,
+                (byte) ((int) (yaw * 256.0F / 360.0F))
+        )));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder rotateFullHead(int entityId, float yaw, float pitch, boolean onGround) {
+        initial.setNext(of(new ClientboundMoveEntityPacket.Rot(
+                entityId,
+                (byte) ((int) (yaw * 256.0F / 360.0F)),
+                (byte) ((int) (pitch * 256.0F / 360.0F)),
+                onGround
+        )));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder movePositionAndRotateFullHead(int entityId, @Nonnull Vector direction, byte yaw, byte pitch, boolean onGround) {
+        initial.setNext(of(new ClientboundMoveEntityPacket.PosRot(
+                entityId,
+                (short) direction.getX(),
+                (short) direction.getY(),
+                (short) direction.getZ(),
+                (byte) ((int) (yaw * 256.0F / 360.0F)),
+                (byte) ((int) (pitch * 256.0F / 360.0F)),
+                onGround)));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder destroyEntity(int entityId) {
+        initial.setNext(of(new ClientboundRemoveEntitiesPacket(entityId)));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder animateBlockBreak(int entityID, @Nonnull Location location, byte destroyStage) {
+        initial.setNext(of(new ClientboundBlockDestructionPacket(entityID,
+                new BlockPos(location.getBlockX(), location.getY(), location.getBlockZ()), destroyStage)));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder setEquipmentItem(int entityId, @Nonnull org.bukkit.inventory.EquipmentSlot equipmentSlot, @Nonnull ItemStack itemStack) {
+        initial.setNext(of(new ClientboundSetEquipmentPacket(entityId, Collections.singletonList(new Pair<>(from(equipmentSlot), CraftItemStack.asNMSCopy(itemStack))))));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder delay(@Nonnull JavaPlugin javaPlugin, long time, @Nonnull TimeUnit timeUnit) {
+        initial.setNext(new DelayPacketStep(javaPlugin, time, timeUnit));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder custom(@Nonnull PacketStep packetStep) {
+        initial.setNext(new ChainablePacketStep(packetStep));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder removeEntity(int entityId) {
+        initial.setNext(of(new ClientboundRemoveEntitiesPacket(entityId)));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder animateEntity(int entityId, @Nonnull Animation animation) {
+        initial.setNext(of(new ClientboundAnimatePacket(entityId, CraftPacketConversion.fromAnimation(animation))));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder spawnEntity(int entityId, @Nonnull UUID uuid, @Nonnull Location location, @Nonnull org.bukkit.entity.EntityType entityType, @Nonnull Vector movementDirection) {
+        initial.setNext(of(new ClientboundAddEntityPacket(
+                entityId,
+                uuid,
+                location.getX(),
+                location.getY(),
+                location.getZ(),
+                location.getYaw(),
+                location.getPitch(),
+            Registry.ENTITY_TYPE.getOptional(org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(entityType.getKey())).orElse(net.minecraft.world.entity.EntityType.ARMOR_STAND),
+                1,
+                new Vec3(movementDirection.getX(), movementDirection.getY(), movementDirection.getZ())
+        )));
+        return this;
+    }
+
+    @Override
+    @Nonnull
+    public PacketStepBuilder withMeta(int entityId, @Nonnull EntityMetaBuilder metaBuilder) {
+        initial.setNext(of(new ClientboundSetEntityDataPacket(entityId, ((CraftEntityMetaBuilder) metaBuilder).build())));
+        return this;
+    }
+
+    @Override
+    public PacketStepBuilder playerAbilities(@Nonnull Set<PlayerAbility> playerAbilities, float flySpeed, float fieldOfViewModifier) {
+        Abilities playerAbilitiesNMS = mapPlayerAbilities(playerAbilities);
+        playerAbilitiesNMS.flyingSpeed = flySpeed;
+        playerAbilitiesNMS.walkingSpeed = fieldOfViewModifier;
+        initial.setNext(of(new ClientboundPlayerAbilitiesPacket(playerAbilitiesNMS)));
+        return this;
+    }
+
+    @Override
+    public void send(@Nonnull Collection<? extends org.bukkit.entity.Player> players){
+        initial.execute(players);
+    }
+
+    private ChainablePacketStep of(Packet<?> packet){
+        return new ChainablePacketStep(new NmsPacketStep(packet));
+    }
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundAddPlayerPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundAddPlayerPacket.java
index ab823de3fe0eb4870cd7fec543730d6d17060940..7c87d7126357c7db69a2efe6bfd367215f6d589d 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundAddPlayerPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundAddPlayerPacket.java
@@ -34,6 +34,18 @@ public class ClientboundAddPlayerPacket implements Packet<ClientGamePacketListen
         this.xRot = buf.readByte();
     }
 
+    // Weeper start
+    public ClientboundAddPlayerPacket(int entityId, UUID uuid, org.bukkit.Location location) {
+        this.entityId = entityId;
+        this.playerId = uuid;
+        this.x = location.getX();
+        this.y = location.getY();
+        this.z = location.getZ();
+        this.yRot = (byte)((int)(location.getYaw() * 256.0F / 360.0F));
+        this.xRot = (byte)((int)(location.getPitch() * 256.0F / 360.0F));
+    }
+    // Weeper end
+
     @Override
     public void write(FriendlyByteBuf buf) {
         buf.writeVarInt(this.entityId);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundAnimatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundAnimatePacket.java
index e94937e58c77a5331d012cb2775ae5f4bc84656e..0d4a5e57ba307b0694b3dcb7d0cbccaff029cb75 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundAnimatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundAnimatePacket.java
@@ -24,11 +24,18 @@ public class ClientboundAnimatePacket implements Packet<ClientGamePacketListener
         this.action = buf.readUnsignedByte();
     }
 
-    @Override
-    public void write(FriendlyByteBuf buf) {
-        buf.writeVarInt(this.id);
-        buf.writeByte(this.action);
+    // Weeper start - allow packet creation without real entity
+    public ClientboundAnimatePacket(int entityId, int animationId){
+        this.id = entityId;
+        this.action = animationId;
     }
+    // Weeper end
+
+  @Override
+  public void write(FriendlyByteBuf buf) {
+    buf.writeVarInt(this.id);
+    buf.writeByte(this.action);
+  }
 
     @Override
     public void handle(ClientGamePacketListener listener) {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
index 420cc7ab5f7245f31dd5b333eacf4e306fc6e7c1..ac4a33850dcfb5ac3cbab34b95b0aa7ccb3bdf97 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
@@ -6,10 +6,13 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.properties.Property;
 import com.mojang.authlib.properties.PropertyMap;
 import java.util.Collection;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import javax.annotation.Nullable;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.Component.Serializer;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.level.GameType;
@@ -38,6 +41,13 @@ public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListe
 
     }
 
+    // Weeper start
+    public ClientboundPlayerInfoPacket(Action action, List<PlayerUpdate> playerUpdates) {
+        this.action = action;
+        this.entries = playerUpdates;
+    }
+    // Weeper end
+
     public ClientboundPlayerInfoPacket(FriendlyByteBuf buf) {
         this.action = buf.readEnum(ClientboundPlayerInfoPacket.Action.class);
         this.entries = buf.readList(this.action::read);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundRotateHeadPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundRotateHeadPacket.java
index 15ebf22e9ca11870e5f24ff5ab8bcbee8c571ee3..9e711248be49a784e3eb37e89902f876f4d69f67 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundRotateHeadPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundRotateHeadPacket.java
@@ -14,6 +14,13 @@ public class ClientboundRotateHeadPacket implements Packet<ClientGamePacketListe
         this.yHeadRot = headYaw;
     }
 
+    // Weeper start - allow packet creation without real entity
+    public ClientboundRotateHeadPacket(int entityId, byte yHeadRot) {
+        this.entityId = entityId;
+        this.yHeadRot = yHeadRot;
+    }
+    // Weeper end
+
     public ClientboundRotateHeadPacket(FriendlyByteBuf buf) {
         this.entityId = buf.readVarInt();
         this.yHeadRot = buf.readByte();
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
index 3e17f6131bf590d7c4a16b79c1c145cb4f565bc9..4fca4285ecda550b061d75a02eb630481f5d8acf 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
@@ -5,6 +5,7 @@ import javax.annotation.Nullable;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.network.syncher.SynchedEntityData.DataItem;
 
 public class ClientboundSetEntityDataPacket implements Packet<ClientGamePacketListener> {
     private final int id;
@@ -22,6 +23,13 @@ public class ClientboundSetEntityDataPacket implements Packet<ClientGamePacketLi
 
     }
 
+    // Weeper - start
+    public ClientboundSetEntityDataPacket(int id, List<DataItem<?>> packedItems) {
+        this.id = id;
+        this.packedItems = packedItems;
+    }
+    // Weeper - end
+
     public ClientboundSetEntityDataPacket(FriendlyByteBuf buf) {
         this.id = buf.readVarInt();
         this.packedItems = SynchedEntityData.unpack(buf);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundTeleportEntityPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundTeleportEntityPacket.java
index 56e4036a88e570333633bf5fc4dc4a2de4654ab9..3df3edce4dc1692c41f1c46f07f934ead4e5ba21 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundTeleportEntityPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundTeleportEntityPacket.java
@@ -23,6 +23,18 @@ public class ClientboundTeleportEntityPacket implements Packet<ClientGamePacketL
         this.onGround = entity.isOnGround();
     }
 
+    // Weeper start
+    public ClientboundTeleportEntityPacket(int entityId, org.bukkit.Location location, boolean isOnGround) {
+        this.id = entityId;
+        this.x = location.getX();
+        this.y = location.getY();
+        this.z = location.getZ();
+        this.yRot = (byte) ((int) (location.getYaw() * 256.0F / 360.0F));
+        this.xRot = (byte) ((int) (location.getPitch() * 256.0F / 360.0F));
+        this.onGround = isOnGround;
+    }
+    // Weeper end
+
     public ClientboundTeleportEntityPacket(FriendlyByteBuf buf) {
         this.id = buf.readVarInt();
         this.x = buf.readDouble();
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 84fce7dccf9232209f939a32acfc3131e62eb27c..c193e2d94f67fc484a24f8c3716c30713dc31821 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -270,7 +270,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     public int invulnerableTime;
     protected boolean firstTick;
     protected final SynchedEntityData entityData;
-    protected static final EntityDataAccessor<Byte> DATA_SHARED_FLAGS_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BYTE);
+    public static final EntityDataAccessor<Byte> DATA_SHARED_FLAGS_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BYTE); // Weeper private -> public
     protected static final int FLAG_ONFIRE = 0;
     private static final int FLAG_SHIFT_KEY_DOWN = 1;
     private static final int FLAG_SPRINTING = 3;
@@ -279,11 +279,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     protected static final int FLAG_GLOWING = 6;
     protected static final int FLAG_FALL_FLYING = 7;
     private static final EntityDataAccessor<Integer> DATA_AIR_SUPPLY_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.INT);
-    private static final EntityDataAccessor<Optional<Component>> DATA_CUSTOM_NAME = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.OPTIONAL_COMPONENT);
-    private static final EntityDataAccessor<Boolean> DATA_CUSTOM_NAME_VISIBLE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
+    public static final EntityDataAccessor<Optional<Component>> DATA_CUSTOM_NAME = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.OPTIONAL_COMPONENT); // Weeper private -> public
+    public static final EntityDataAccessor<Boolean> DATA_CUSTOM_NAME_VISIBLE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN); // Weeper private -> public
     private static final EntityDataAccessor<Boolean> DATA_SILENT = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_NO_GRAVITY = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
-    protected static final EntityDataAccessor<net.minecraft.world.entity.Pose> DATA_POSE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.POSE);
+    public static final EntityDataAccessor<net.minecraft.world.entity.Pose> DATA_POSE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.POSE); // Weeper -> public
     private static final EntityDataAccessor<Integer> DATA_TICKS_FROZEN = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.INT);
     private EntityInLevelCallback levelCallback;
     private Vec3 packetCoordinates;
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index fdd76d1a1636f30f519c434b41061d826c4a8261..8108fc40289f0d2a1b2a891d550899663114c3aa 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -174,7 +174,7 @@ public abstract class LivingEntity extends Entity {
     private static final EntityDataAccessor<Boolean> DATA_EFFECT_AMBIENCE_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.BOOLEAN);
     public static final EntityDataAccessor<Integer> DATA_ARROW_COUNT_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Integer> DATA_STINGER_COUNT_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.INT);
-    private static final EntityDataAccessor<Optional<BlockPos>> SLEEPING_POS_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.OPTIONAL_BLOCK_POS);
+    public static final EntityDataAccessor<Optional<BlockPos>> SLEEPING_POS_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.OPTIONAL_BLOCK_POS); // Weeper private -> public
     protected static final float DEFAULT_EYE_HEIGHT = 1.74F;
     protected static final EntityDimensions SLEEPING_DIMENSIONS = EntityDimensions.fixed(0.2F, 0.2F);
     public static final float EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT = 0.5F;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a54edbcee5f4f914cb95d5053cf587bc6a74ffa2..b63cf54d022f8e595a8e22e62ffd260b5f74004a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2852,5 +2852,11 @@ public final class CraftServer implements Server {
         return this.potionBrewer;
     }
 
+
+    private final com.github.weepingmc.packet.PacketPipeline packetPipeline = new com.github.weepingmc.packet.CraftPacketPipeline();
+    @Override
+    public @Nonnull com.github.weepingmc.packet.PacketPipeline getPacketPipeline() {
+        return packetPipeline;
+    }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
index 0102c475b6e49777c1e24c32e5eff2992e51c89f..95caf0537a74334367c5a04f1bb78b8ee1e09559 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
@@ -20,7 +20,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     final Scoreboard board;
     boolean registeredGlobally = false; // Paper
 
-    CraftScoreboard(Scoreboard board) {
+    public CraftScoreboard(Scoreboard board) { // Weeper package private -> public
         this.board = board;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
index be5e4c2f3c552e0438ed1cc660e411c41fd13df7..7ddf6ec3169dfcdde08c11be890e66373019c59d 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -14,14 +14,20 @@ import org.bukkit.scoreboard.Team;
 import org.bukkit.scoreboard.Team.Option;
 import org.bukkit.scoreboard.Team.OptionStatus;
 
-final class CraftTeam extends CraftScoreboardComponent implements Team {
+public final class CraftTeam extends CraftScoreboardComponent implements Team { // Weeper package private -> public
     private final PlayerTeam team;
 
-    CraftTeam(CraftScoreboard scoreboard, PlayerTeam team) {
+    public CraftTeam(CraftScoreboard scoreboard, PlayerTeam team) { // Weeper package private -> public
         super(scoreboard);
         this.team = team;
     }
 
+    // Weeper start
+    public PlayerTeam getHandle(){
+        return team;
+    }
+    // Weeper end
+
     @Override
     public String getName() throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
