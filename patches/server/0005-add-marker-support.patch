From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yannick Lamprecht <yannicklamprecht@live.de>
Date: Thu, 8 Jul 2021 23:23:01 +0200
Subject: [PATCH] add marker support


diff --git a/src/main/java/com/github/weepingmc/util/ColorUtil.java b/src/main/java/com/github/weepingmc/util/ColorUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..db25a5ed8f50ec406ca77441e60cb142ea9596dd
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/util/ColorUtil.java
@@ -0,0 +1,39 @@
+package com.github.weepingmc.util;
+
+import java.awt.Color;
+
+public class ColorUtil {
+
+        public static Color fromARGB(int argb){
+            return new Color(getR(argb), getG(argb), getB(argb), getA(argb));
+        }
+
+        public static int toARGB(Color color){
+            return getARGBInt(color.getAlpha(), color.getRed(), color.getGreen(), color.getBlue());
+        }
+
+        private static int getA(int argb) {
+            return (argb >> 24) & 0xFF;
+        }
+
+        private static int getR(int argb) {
+            return (argb >> 16) & 0xFF;
+        }
+
+        private static int getG(int argb) {
+            return (argb >> 8) & 0xFF;
+        }
+
+        private static int getB(int argb) {
+            return argb & 0xFF;
+        }
+
+        private static int getARGBInt(int a, int r, int g, int b) {
+            int encoded = 0;
+            encoded = encoded | b;
+            encoded = encoded | (g << 8);
+            encoded = encoded | (r << 16);
+            encoded = encoded | (a << 24);
+            return encoded;
+        }
+}
diff --git a/src/main/java/src/main/java/com/github/weepingmc/packet/CraftPacketStepBuilder.java b/src/main/java/src/main/java/com/github/weepingmc/packet/CraftPacketStepBuilder.java
index d85c18befce2b290c7e17a6b12ae3cf676f27296..2f3297c8308acb6a8536ed1e81ddffd8b98246b5 100644
--- a/src/main/java/src/main/java/com/github/weepingmc/packet/CraftPacketStepBuilder.java
+++ b/src/main/java/src/main/java/com/github/weepingmc/packet/CraftPacketStepBuilder.java
@@ -5,15 +5,21 @@ import com.destroystokyo.paper.profile.PlayerProfile;
 import com.github.weepingmc.packet.ChainablePacketStep.DelayPacketStep;
 import com.github.weepingmc.packet.ChainablePacketStep.NmsPacketStep;
 import com.github.weepingmc.packet.options.*;
+import com.github.weepingmc.util.ColorUtil;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Pair;
+import io.netty.buffer.Unpooled;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.common.ClientboundCustomPayloadPacket;
+import net.minecraft.network.protocol.common.custom.GameTestAddMarkerDebugPayload;
 import net.minecraft.network.protocol.game.*;
 import net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket.Action;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.player.Abilities;
@@ -28,9 +34,12 @@ import org.bukkit.plugin.java.JavaPlugin;
 import org.bukkit.scoreboard.Team;
 import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import javax.annotation.Nonnull;
+import java.awt.*;
 import java.util.*;
+import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 
@@ -76,7 +85,19 @@ public class CraftPacketStepBuilder implements PacketStepBuilder {
     @Override
     @Nonnull
     public PacketStepBuilder spawnPlayer(int entityId, @Nonnull UUID uuid, @Nonnull Location location) {
-        initial.setNext(of(new ClientboundAddPlayerPacket(entityId, uuid, location)));
+        initial.setNext(of(new ClientboundAddEntityPacket(
+            entityId,
+            uuid,
+            location.x(),
+            location.y(),
+            location.z(),
+            location.getPitch(),
+            location.getYaw(),
+            EntityType.PLAYER,
+            0,
+            Vec3.ZERO,
+            location.getYaw()
+        )));
         return this;
     }
 
@@ -248,6 +269,18 @@ public class CraftPacketStepBuilder implements PacketStepBuilder {
         return this;
     }
 
+    @Override
+    public @NotNull PacketStepBuilder showTestMarker(@NotNull Location location, @NotNull Color color, @Nullable String text, int time) {
+        var payload = new GameTestAddMarkerDebugPayload(
+            new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ()),
+            ColorUtil.toARGB(color),
+            text==null?"": text,
+            time
+        );
+        initial.setNext(of(new ClientboundCustomPayloadPacket(payload)));
+        return this;
+    }
+
     @Override
     public void send(@Nonnull Collection<? extends org.bukkit.entity.Player> players) {
         initial.execute(players);
