From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yannick Lamprecht <yannicklamprecht@live.de>
Date: Wed, 20 Dec 2023 22:19:04 +0100
Subject: [PATCH] add util to list all data accessors for entity type


diff --git a/build.gradle.kts b/build.gradle.kts
index 16def59b294f7132697d4a7b1086faf307fa24ea..a30fdea449465e3ce89f6c5b75a76e5d2a0c22bc 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -55,6 +55,7 @@ dependencies {
     testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
     testImplementation("org.hamcrest:hamcrest:2.2")
     testImplementation("org.mockito:mockito-core:5.5.0")
+    testImplementation("org.junit.jupiter:junit-jupiter-params:5.10.0") // Weeper - allow parameterized test
 }
 
 val craftbukkitPackageVersion = "1_20_R3" // Paper
diff --git a/src/main/java/com/github/weepingmc/util/EntityDataAccessorReflection.java b/src/main/java/com/github/weepingmc/util/EntityDataAccessorReflection.java
new file mode 100644
index 0000000000000000000000000000000000000000..646fc3abd90c0459e9d00dc1c262adb493e4c7c5
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/util/EntityDataAccessorReflection.java
@@ -0,0 +1,260 @@
+package com.github.weepingmc.util;
+
+import io.papermc.paper.util.ObfHelper;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import net.minecraft.network.syncher.EntityDataAccessor;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class EntityDataAccessorReflection {
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(EntityDataAccessorReflection.class);
+
+    static final Map<Class<? extends org.bukkit.entity.Entity>, Class<? extends net.minecraft.world.entity.Entity>> mapping = new java.util.HashMap<>();
+    private static final Map<Class<? extends org.bukkit.entity.Entity>, Map<Integer, org.bukkit.EntityMetaResult>> entityMetaResultCache = new ConcurrentHashMap<>();
+    private static final Set<Class<? extends org.bukkit.entity.Entity>> cachedEntitySet;
+
+    static {
+        mapping.put(org.bukkit.entity.Item.class, net.minecraft.world.entity.item.ItemEntity.class);
+        mapping.put(org.bukkit.entity.ExperienceOrb.class, net.minecraft.world.entity.ExperienceOrb.class);
+        mapping.put(org.bukkit.entity.AreaEffectCloud.class, net.minecraft.world.entity.AreaEffectCloud.class);
+        mapping.put(org.bukkit.entity.ElderGuardian.class, net.minecraft.world.entity.monster.ElderGuardian.class);
+        mapping.put(org.bukkit.entity.WitherSkeleton.class, net.minecraft.world.entity.monster.WitherSkeleton.class);
+        mapping.put(org.bukkit.entity.Stray.class, net.minecraft.world.entity.monster.Stray.class);
+        mapping.put(org.bukkit.entity.Egg.class, net.minecraft.world.entity.projectile.ThrownEgg.class);
+        mapping.put(org.bukkit.entity.LeashHitch.class, net.minecraft.world.entity.decoration.LeashFenceKnotEntity.class);
+        mapping.put(org.bukkit.entity.Painting.class, net.minecraft.world.entity.decoration.Painting.class);
+        mapping.put(org.bukkit.entity.Arrow.class, net.minecraft.world.entity.projectile.Arrow.class);
+        mapping.put(org.bukkit.entity.Snowball.class, net.minecraft.world.entity.projectile.Snowball.class);
+        mapping.put(org.bukkit.entity.LargeFireball.class, net.minecraft.world.entity.projectile.LargeFireball.class);
+        mapping.put(org.bukkit.entity.SmallFireball.class, net.minecraft.world.entity.projectile.SmallFireball.class);
+        mapping.put(org.bukkit.entity.EnderPearl.class, net.minecraft.world.entity.projectile.ThrownEnderpearl.class);
+        mapping.put(org.bukkit.entity.EnderSignal.class, net.minecraft.world.entity.projectile.EyeOfEnder.class);
+        mapping.put(org.bukkit.entity.ThrownPotion.class, net.minecraft.world.entity.projectile.ThrownPotion.class);
+        mapping.put(org.bukkit.entity.ThrownExpBottle.class, net.minecraft.world.entity.projectile.ThrownExperienceBottle.class);
+        mapping.put(org.bukkit.entity.ItemFrame.class, net.minecraft.world.entity.decoration.ItemFrame.class);
+        mapping.put(org.bukkit.entity.WitherSkull.class, net.minecraft.world.entity.projectile.WitherSkull.class);
+        mapping.put(org.bukkit.entity.TNTPrimed.class, net.minecraft.world.entity.item.PrimedTnt.class);
+        mapping.put(org.bukkit.entity.FallingBlock.class, net.minecraft.world.entity.item.FallingBlockEntity.class);
+        mapping.put(org.bukkit.entity.Firework.class, net.minecraft.world.entity.projectile.FireworkRocketEntity.class);
+        mapping.put(org.bukkit.entity.Husk.class, net.minecraft.world.entity.monster.Husk.class);
+        mapping.put(org.bukkit.entity.SpectralArrow.class, net.minecraft.world.entity.projectile.SpectralArrow.class);
+        mapping.put(org.bukkit.entity.ShulkerBullet.class, net.minecraft.world.entity.projectile.ShulkerBullet.class);
+        mapping.put(org.bukkit.entity.DragonFireball.class, net.minecraft.world.entity.projectile.DragonFireball.class);
+        mapping.put(org.bukkit.entity.ZombieVillager.class, net.minecraft.world.entity.monster.ZombieVillager.class);
+        mapping.put(org.bukkit.entity.SkeletonHorse.class, net.minecraft.world.entity.animal.horse.SkeletonHorse.class);
+        mapping.put(org.bukkit.entity.ZombieHorse.class, net.minecraft.world.entity.animal.horse.ZombieHorse.class);
+        mapping.put(org.bukkit.entity.ArmorStand.class, net.minecraft.world.entity.decoration.ArmorStand.class);
+        mapping.put(org.bukkit.entity.Donkey.class, net.minecraft.world.entity.animal.horse.Donkey.class);
+        mapping.put(org.bukkit.entity.Mule.class, net.minecraft.world.entity.animal.horse.Mule.class);
+        mapping.put(org.bukkit.entity.EvokerFangs.class, net.minecraft.world.entity.projectile.EvokerFangs.class);
+        mapping.put(org.bukkit.entity.Evoker.class, net.minecraft.world.entity.monster.Evoker.class);
+        mapping.put(org.bukkit.entity.Vex.class, net.minecraft.world.entity.monster.Vex.class);
+        mapping.put(org.bukkit.entity.Vindicator.class, net.minecraft.world.entity.monster.Vindicator.class);
+        mapping.put(org.bukkit.entity.Illusioner.class, net.minecraft.world.entity.monster.Illusioner.class);
+        mapping.put(org.bukkit.entity.minecart.CommandMinecart.class, net.minecraft.world.entity.vehicle.MinecartCommandBlock.class);
+        mapping.put(org.bukkit.entity.Boat.class, net.minecraft.world.entity.vehicle.Boat.class);
+        mapping.put(org.bukkit.entity.minecart.RideableMinecart.class, net.minecraft.world.entity.vehicle.Minecart.class);
+        mapping.put(org.bukkit.entity.minecart.StorageMinecart.class, net.minecraft.world.entity.vehicle.MinecartChest.class);
+        mapping.put(org.bukkit.entity.minecart.PoweredMinecart.class, net.minecraft.world.entity.vehicle.MinecartFurnace.class);
+        mapping.put(org.bukkit.entity.minecart.ExplosiveMinecart.class, net.minecraft.world.entity.vehicle.MinecartTNT.class);
+        mapping.put(org.bukkit.entity.minecart.HopperMinecart.class, net.minecraft.world.entity.vehicle.MinecartHopper.class);
+        mapping.put(org.bukkit.entity.minecart.SpawnerMinecart.class, net.minecraft.world.entity.vehicle.MinecartSpawner.class);
+        mapping.put(org.bukkit.entity.Creeper.class, net.minecraft.world.entity.monster.Creeper.class);
+        mapping.put(org.bukkit.entity.Skeleton.class, net.minecraft.world.entity.monster.Skeleton.class);
+        mapping.put(org.bukkit.entity.Spider.class, net.minecraft.world.entity.monster.Spider.class);
+        mapping.put(org.bukkit.entity.Giant.class, net.minecraft.world.entity.monster.Giant.class);
+        mapping.put(org.bukkit.entity.Zombie.class, net.minecraft.world.entity.monster.Zombie.class);
+        mapping.put(org.bukkit.entity.Slime.class, net.minecraft.world.entity.monster.Slime.class);
+        mapping.put(org.bukkit.entity.Ghast.class, net.minecraft.world.entity.monster.Ghast.class);
+        mapping.put(org.bukkit.entity.PigZombie.class, net.minecraft.world.entity.monster.ZombifiedPiglin.class);
+        mapping.put(org.bukkit.entity.Enderman.class, net.minecraft.world.entity.monster.EnderMan.class);
+        mapping.put(org.bukkit.entity.CaveSpider.class, net.minecraft.world.entity.monster.CaveSpider.class);
+        mapping.put(org.bukkit.entity.Silverfish.class, net.minecraft.world.entity.monster.Silverfish.class);
+        mapping.put(org.bukkit.entity.Blaze.class, net.minecraft.world.entity.monster.Blaze.class);
+        mapping.put(org.bukkit.entity.MagmaCube.class, net.minecraft.world.entity.monster.MagmaCube.class);
+        mapping.put(org.bukkit.entity.EnderDragon.class, net.minecraft.world.entity.boss.enderdragon.EnderDragon.class);
+        mapping.put(org.bukkit.entity.Wither.class, net.minecraft.world.entity.boss.wither.WitherBoss.class);
+        mapping.put(org.bukkit.entity.Bat.class, net.minecraft.world.entity.ambient.Bat.class);
+        mapping.put(org.bukkit.entity.Witch.class, net.minecraft.world.entity.monster.Witch.class);
+        mapping.put(org.bukkit.entity.Endermite.class, net.minecraft.world.entity.monster.Endermite.class);
+        mapping.put(org.bukkit.entity.Guardian.class, net.minecraft.world.entity.monster.Guardian.class);
+        mapping.put(org.bukkit.entity.Shulker.class, net.minecraft.world.entity.monster.Shulker.class);
+        mapping.put(org.bukkit.entity.Pig.class, net.minecraft.world.entity.animal.Pig.class);
+        mapping.put(org.bukkit.entity.Sheep.class, net.minecraft.world.entity.animal.Sheep.class);
+        mapping.put(org.bukkit.entity.Cow.class, net.minecraft.world.entity.animal.Cow.class);
+        mapping.put(org.bukkit.entity.Chicken.class, net.minecraft.world.entity.animal.Chicken.class);
+        mapping.put(org.bukkit.entity.Squid.class, net.minecraft.world.entity.animal.Squid.class);
+        mapping.put(org.bukkit.entity.Wolf.class, net.minecraft.world.entity.animal.Wolf.class);
+        mapping.put(org.bukkit.entity.MushroomCow.class, net.minecraft.world.entity.animal.MushroomCow.class);
+        mapping.put(org.bukkit.entity.Snowman.class, net.minecraft.world.entity.animal.SnowGolem.class);
+        mapping.put(org.bukkit.entity.Ocelot.class, net.minecraft.world.entity.animal.Ocelot.class);
+        mapping.put(org.bukkit.entity.IronGolem.class, net.minecraft.world.entity.animal.IronGolem.class);
+        mapping.put(org.bukkit.entity.Horse.class, net.minecraft.world.entity.animal.horse.Horse.class);
+        mapping.put(org.bukkit.entity.Rabbit.class, net.minecraft.world.entity.animal.Rabbit.class);
+        mapping.put(org.bukkit.entity.PolarBear.class, net.minecraft.world.entity.animal.PolarBear.class);
+        mapping.put(org.bukkit.entity.Llama.class, net.minecraft.world.entity.animal.horse.Llama.class);
+        mapping.put(org.bukkit.entity.LlamaSpit.class, net.minecraft.world.entity.projectile.LlamaSpit.class);
+        mapping.put(org.bukkit.entity.Parrot.class, net.minecraft.world.entity.animal.Parrot.class);
+        mapping.put(org.bukkit.entity.Villager.class, net.minecraft.world.entity.npc.Villager.class);
+        mapping.put(org.bukkit.entity.EnderCrystal.class, net.minecraft.world.entity.boss.enderdragon.EndCrystal.class);
+        mapping.put(org.bukkit.entity.Turtle.class, net.minecraft.world.entity.animal.Turtle.class);
+        mapping.put(org.bukkit.entity.Phantom.class, net.minecraft.world.entity.monster.Phantom.class);
+        mapping.put(org.bukkit.entity.Trident.class, net.minecraft.world.entity.projectile.ThrownTrident.class);
+        mapping.put(org.bukkit.entity.Cod.class, net.minecraft.world.entity.animal.Cod.class);
+        mapping.put(org.bukkit.entity.Salmon.class, net.minecraft.world.entity.animal.Salmon.class);
+        mapping.put(org.bukkit.entity.PufferFish.class, net.minecraft.world.entity.animal.Pufferfish.class);
+        mapping.put(org.bukkit.entity.TropicalFish.class, net.minecraft.world.entity.animal.TropicalFish.class);
+        mapping.put(org.bukkit.entity.Drowned.class, net.minecraft.world.entity.monster.Drowned.class);
+        mapping.put(org.bukkit.entity.Dolphin.class, net.minecraft.world.entity.animal.Dolphin.class);
+        mapping.put(org.bukkit.entity.Cat.class, net.minecraft.world.entity.animal.Cat.class);
+        mapping.put(org.bukkit.entity.Panda.class, net.minecraft.world.entity.animal.Panda.class);
+        mapping.put(org.bukkit.entity.Pillager.class, net.minecraft.world.entity.monster.Pillager.class);
+        mapping.put(org.bukkit.entity.Ravager.class, net.minecraft.world.entity.monster.Ravager.class);
+        mapping.put(org.bukkit.entity.TraderLlama.class, net.minecraft.world.entity.animal.horse.TraderLlama.class);
+        mapping.put(org.bukkit.entity.WanderingTrader.class, net.minecraft.world.entity.npc.WanderingTrader.class);
+        mapping.put(org.bukkit.entity.Fox.class, net.minecraft.world.entity.animal.Fox.class);
+        mapping.put(org.bukkit.entity.Bee.class, net.minecraft.world.entity.animal.Bee.class);
+        mapping.put(org.bukkit.entity.Hoglin.class, net.minecraft.world.entity.monster.hoglin.Hoglin.class);
+        mapping.put(org.bukkit.entity.Piglin.class, net.minecraft.world.entity.monster.piglin.Piglin.class);
+        mapping.put(org.bukkit.entity.Strider.class, net.minecraft.world.entity.monster.Strider.class);
+        mapping.put(org.bukkit.entity.Zoglin.class, net.minecraft.world.entity.monster.Zoglin.class);
+        mapping.put(org.bukkit.entity.PiglinBrute.class, net.minecraft.world.entity.monster.piglin.PiglinBrute.class);
+        mapping.put(org.bukkit.entity.Axolotl.class, net.minecraft.world.entity.animal.axolotl.Axolotl.class);
+        mapping.put(org.bukkit.entity.GlowItemFrame.class, net.minecraft.world.entity.decoration.GlowItemFrame.class);
+        mapping.put(org.bukkit.entity.GlowSquid.class, net.minecraft.world.entity.GlowSquid.class);
+        mapping.put(org.bukkit.entity.Goat.class, net.minecraft.world.entity.animal.goat.Goat.class);
+        mapping.put(org.bukkit.entity.Marker.class, net.minecraft.world.entity.Marker.class);
+        mapping.put(org.bukkit.entity.Allay.class, net.minecraft.world.entity.animal.allay.Allay.class);
+        mapping.put(org.bukkit.entity.ChestBoat.class, net.minecraft.world.entity.vehicle.ChestBoat.class);
+        mapping.put(org.bukkit.entity.Frog.class, net.minecraft.world.entity.animal.frog.Frog.class);
+        mapping.put(org.bukkit.entity.Tadpole.class, net.minecraft.world.entity.animal.frog.Tadpole.class);
+        mapping.put(org.bukkit.entity.Warden.class, net.minecraft.world.entity.monster.warden.Warden.class);
+        mapping.put(org.bukkit.entity.Camel.class, net.minecraft.world.entity.animal.camel.Camel.class);
+        mapping.put(org.bukkit.entity.BlockDisplay.class, net.minecraft.world.entity.Display.BlockDisplay.class);
+        mapping.put(org.bukkit.entity.Interaction.class, net.minecraft.world.entity.Interaction.class);
+        mapping.put(org.bukkit.entity.ItemDisplay.class, net.minecraft.world.entity.Display.ItemDisplay.class);
+        mapping.put(org.bukkit.entity.Sniffer.class, net.minecraft.world.entity.animal.sniffer.Sniffer.class);
+        mapping.put(org.bukkit.entity.TextDisplay.class, net.minecraft.world.entity.Display.TextDisplay.class);
+        mapping.put(org.bukkit.entity.Breeze.class, net.minecraft.world.entity.monster.breeze.Breeze.class);
+        mapping.put(org.bukkit.entity.WindCharge.class, net.minecraft.world.entity.projectile.WindCharge.class);
+        mapping.put(org.bukkit.entity.FishHook.class, net.minecraft.world.entity.projectile.FishingHook.class);
+        mapping.put(org.bukkit.entity.LightningStrike.class, net.minecraft.world.entity.LightningBolt.class);
+        mapping.put(org.bukkit.entity.Player.class, net.minecraft.world.entity.player.Player.class);
+        cachedEntitySet = mapping.keySet();
+    }
+
+    public static Set<Class<? extends org.bukkit.entity.Entity>> getAvailableBukkitEntityClasses() {
+        return cachedEntitySet;
+    }
+
+    public static <T extends org.bukkit.entity.Entity> Map<Integer, org.bukkit.EntityMetaResult> getAllAccessors(Class<T> clazz) {
+        Map<Integer, org.bukkit.EntityMetaResult> cachedResult = entityMetaResultCache.get(clazz);
+        if (cachedResult != null) {
+            return cachedResult;
+        }
+
+        Class<? extends net.minecraft.world.entity.Entity> nmsClass = mapping.get(clazz);
+        if (nmsClass == null) {
+            return Map.of();
+        }
+
+        if (net.minecraft.world.entity.Entity.class.isAssignableFrom(nmsClass)) {
+            Map<Integer, org.bukkit.EntityMetaResult> result = getAllAccessorsInternal(nmsClass);
+            entityMetaResultCache.put(clazz, result);
+            return result;
+        }
+        return Map.of();
+    }
+
+    private static <T extends net.minecraft.world.entity.Entity> Map<Integer, org.bukkit.EntityMetaResult> getAllAccessorsInternal(Class<T> clazz) {
+        Map<Integer, org.bukkit.EntityMetaResult> result = new HashMap<>();
+
+        List<Class<?>> allClasses = new ArrayList<>();
+        allClasses.add(clazz);
+        Class<?> current = clazz;
+        while (current.getSuperclass() != null) {
+            var toAdd = current.getSuperclass();
+            if (net.minecraft.world.entity.Entity.class.isAssignableFrom(toAdd)) {
+                allClasses.add(toAdd);
+            }
+            current = toAdd;
+        }
+
+        for (Class<?> specificEntityClass : allClasses) {
+            for (Field field : specificEntityClass.getDeclaredFields()) {
+                if (Modifier.isStatic(field.getModifiers()) && field.getType().isAssignableFrom(EntityDataAccessor.class)) {
+                    try {
+                        field.setAccessible(true);
+                        EntityDataAccessor<?> accessor = (EntityDataAccessor<?>) field.get(null);
+                        Type genericType = getGenericType(field);
+
+                        org.bukkit.EntityMetaResult metaResult = null;
+                        if (genericType instanceof Class<?> typeClazz) {
+                            metaResult = add(specificEntityClass, typeClazz, null, accessor.getId());
+                        } else if (genericType instanceof ParameterizedType p) {
+                            metaResult = add(specificEntityClass, (Class<?>) p.getActualTypeArguments()[0], (Class<?>) p.getRawType(), accessor.getId());
+                        }
+
+                        if (metaResult != null) {
+                            result.put(accessor.getId(), metaResult);
+                        }
+                    } catch (IllegalAccessException e) {
+                        LOGGER.error("Field cannot be accessed", e);
+                    }
+                }
+            }
+        }
+
+        return java.util.Collections.unmodifiableMap(result);
+    }
+
+    private static org.bukkit.EntityMetaResult add(Class<?> entityClass, Class<?> accessorGenericType, Class<?> wrapperClass, int accessorId) {
+
+        String deobfName = ObfHelper.INSTANCE.deobfClassName(accessorGenericType.getName());
+
+        return new CraftEntityMetaResult(
+            accessorId,
+            entityClass,
+            accessorGenericType,
+            wrapperClass,
+            deobfName
+        );
+    }
+
+
+    public static Type getGenericType(Field field) {
+        return getGenericType(field, 0);
+    }
+
+    public static Type getGenericType(Field field, int argumentIndex) {
+        ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();
+        return parameterizedType.getActualTypeArguments()[argumentIndex];
+    }
+
+    public static Class<?> getGenericType(Class<?> clazz, int argumentIndex) {
+        ParameterizedType parameterizedType = (ParameterizedType) clazz.getGenericSuperclass();
+        return (Class<?>) parameterizedType.getActualTypeArguments()[argumentIndex];
+    }
+
+    public record CraftEntityMetaResult(
+        int accessorId,
+        Class<?> entityClass,
+        Class<?> accessorGenericType,
+        Class<?> wrapperClass,
+        String deobfedName
+    ) implements org.bukkit.EntityMetaResult {
+        public boolean isTypeGenericItself() {
+            return wrapperClass != null;
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index ec2396f0e5d62b10450eaa7239a8c5479638b3c3..0e95c6f37e7f441b8dbcef6bd345d0bc054d097c 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -642,6 +642,18 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
     // Paper end
 
+    // Weeper start - entity data accessors
+    @Override
+    public java.util.Set<Class<? extends org.bukkit.entity.Entity>> getAvailableBukkitEntityClasses() {
+        return com.github.weepingmc.util.EntityDataAccessorReflection.getAvailableBukkitEntityClasses();
+    }
+
+    @Override
+    public <T extends org.bukkit.entity.Entity> java.util.Map<Integer, org.bukkit.EntityMetaResult> getAllAccessors(Class<T> clazz) {
+        return com.github.weepingmc.util.EntityDataAccessorReflection.getAllAccessors(clazz);
+    }
+    // Weeper end - entity data accessors
+
     /**
      * This helper class represents the different NBT Tags.
      * <p>
diff --git a/src/test/java/com/github/weepingmc/util/EntityDataAccessorReflectionTest.java b/src/test/java/com/github/weepingmc/util/EntityDataAccessorReflectionTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..72a9200311310a1aa547c347ee98c4d254206c0b
--- /dev/null
+++ b/src/test/java/com/github/weepingmc/util/EntityDataAccessorReflectionTest.java
@@ -0,0 +1,42 @@
+package com.github.weepingmc.util;
+
+import java.util.Arrays;
+import java.util.Objects;
+import org.bukkit.entity.EntityType;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.EnumSource;
+
+import static java.util.function.Predicate.not;
+
+class EntityDataAccessorReflectionTest {
+
+    @ParameterizedTest
+    @EnumSource(
+        value = EntityType.class,
+        names = {"UNKNOWN",},
+        mode = EnumSource.Mode.EXCLUDE
+    )
+    public void checkAllEntityMappingsPresent(EntityType entityType) {
+        Assertions.assertTrue(
+            EntityDataAccessorReflection.mapping.containsKey(entityType.getEntityClass()),
+            "Missing mappings for " + entityType.getEntityClass().getSimpleName());
+    }
+
+
+    @Test
+    public void mappingGeneratorHelper() {
+        StringBuilder stringBuilder = new StringBuilder();
+        Arrays.stream(EntityType.values())
+            .filter(entityType -> entityType != EntityType.UNKNOWN)
+            .map(EntityType::getEntityClass)
+            .filter(not(EntityDataAccessorReflection.mapping::containsKey))
+            .filter(Objects::nonNull)
+            .forEach(entityClass -> {
+                stringBuilder.append("mapping.put(").append(entityClass.getSimpleName()).append(".class").append(", ").append(entityClass.getSimpleName()).append(".class").append(");").append("\n");
+            });
+        System.out.println(stringBuilder);
+    }
+
+}
