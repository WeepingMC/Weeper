From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yannick Lamprecht <yannicklamprecht@live.de>
Date: Sat, 16 Mar 2024 22:58:19 +0100
Subject: [PATCH] add disguise api


diff --git a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
index b6f4400df3d8ec7e06a996de54f8cabba57885e1..399295b28f0cbd3a7655dc46dfcfe2dafc567495 100644
--- a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
+++ b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
@@ -71,4 +72,59 @@ public class PaperSkinParts implements SkinParts {
             .add("hats=" + hasHatsEnabled())
             .toString();
     }
+
+    public static SkinParts.Builder builder(){
+        return new Builder();
+    }
+
+    public static class Builder implements SkinParts.Builder{
+        private int raw = 0;
+
+        private static final int CAPE = 0x01;
+        private static final int JACKET = 0x02;
+        private static final int LEFT_SLEEVE = 0x04;
+        private static final int RIGHT_SLEEVE = 0x08;
+        private static final int LEFT_PANTS = 0x10;
+        private static final int RIGHT_PANTS = 0x20;
+        private static final int HAT = 0x40;
+
+        public @org.jetbrains.annotations.NotNull Builder withCape(){
+            raw |= CAPE;
+            return this;
+        }
+
+        public @org.jetbrains.annotations.NotNull Builder withJacket(){
+            raw |= JACKET;
+            return this;
+        }
+
+        public @org.jetbrains.annotations.NotNull Builder withLeftSleeve(){
+            raw |= LEFT_SLEEVE;
+            return this;
+        }
+
+        public @org.jetbrains.annotations.NotNull Builder withRightSleeve(){
+            raw |= RIGHT_SLEEVE;
+            return this;
+        }
+
+        public @org.jetbrains.annotations.NotNull Builder withLeftPants(){
+            raw |= LEFT_PANTS;
+            return this;
+        }
+
+        public @org.jetbrains.annotations.NotNull Builder withRightPants(){
+            raw |= RIGHT_PANTS;
+            return this;
+        }
+
+        public @org.jetbrains.annotations.NotNull Builder withHat(){
+            raw |= HAT;
+            return this;
+        }
+
+        public @org.jetbrains.annotations.NotNull SkinParts build(){
+            return new PaperSkinParts(raw);
+        }
+    }
 }
diff --git a/src/main/java/com/github/weepingmc/disguise/DisguiseUtil.java b/src/main/java/com/github/weepingmc/disguise/DisguiseUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..e5c8fac57435a2f955e4de1061e8987933c71c4d
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/disguise/DisguiseUtil.java
@@ -0,0 +1,94 @@
+package com.github.weepingmc.disguise;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import java.util.EnumSet;
+import java.util.List;
+import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
+import net.minecraft.network.syncher.EntityDataAccessor;
+import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.phys.Vec3;
+import org.bukkit.Bukkit;
+
+public final class DisguiseUtil {
+    private DisguiseUtil(){}
+
+    public static boolean tryDisguise(ServerPlayer player, Entity entity, ClientboundAddEntityPacket clientboundAddEntityPacket) {
+            switch (entity.getBukkitEntity().getDisguiseData()) {
+                case DisguiseData.OriginalDisguise disguise -> {
+                    return false;
+                }
+                case com.github.weepingmc.disguise.EntityTypeDisguise(var type) -> {
+                    player.connection.send(new net.minecraft.network.protocol.game.ClientboundAddEntityPacket(
+                        clientboundAddEntityPacket.getId(),
+                        clientboundAddEntityPacket.getUUID(),
+                        clientboundAddEntityPacket.getX(),
+                        clientboundAddEntityPacket.getY(),
+                        clientboundAddEntityPacket.getZ(),
+                        clientboundAddEntityPacket.getXRot(),
+                        clientboundAddEntityPacket.getYRot(),
+                        org.bukkit.craftbukkit.entity.CraftEntityType.bukkitToMinecraft(type),
+                        0,
+                        Vec3.ZERO.add(clientboundAddEntityPacket.getX(), clientboundAddEntityPacket.getY(), clientboundAddEntityPacket.getZ()).scale(1/8000.0D),
+                        clientboundAddEntityPacket.getYHeadRot()
+                    ));
+
+                    return true;
+                }
+                case com.github.weepingmc.disguise.PlayerDisguise(var playerProfile, var listed, var skinParts) -> {
+                    PlayerProfile adapted = Bukkit.createProfile(entity.getUUID(), entity.hasCustomName()? entity.getBukkitEntity().getCustomName(): playerProfile.getName());
+                    adapted.setProperties(playerProfile.getProperties());
+                    net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket.Entry playerUpdate =
+                        new net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket.Entry(
+                            entity.getUUID(),
+                            com.destroystokyo.paper.profile.CraftPlayerProfile.asAuthlibCopy(adapted),
+                            listed,
+                            0,
+                            net.minecraft.world.level.GameType.DEFAULT_MODE,
+                            entity.getCustomName(),
+                            null
+                        );
+                    player.connection.send(new net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket(EnumSet.of(net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket.Action.ADD_PLAYER), playerUpdate));
+
+                    player.connection.send(new net.minecraft.network.protocol.game.ClientboundAddEntityPacket(
+                        clientboundAddEntityPacket.getId(),
+                        clientboundAddEntityPacket.getUUID(),
+                        clientboundAddEntityPacket.getX(),
+                        clientboundAddEntityPacket.getY(),
+                        clientboundAddEntityPacket.getZ(),
+                        clientboundAddEntityPacket.getXRot(),
+                        clientboundAddEntityPacket.getYRot(),
+                        net.minecraft.world.entity.EntityType.PLAYER,
+                        0,
+                        Vec3.ZERO.add(clientboundAddEntityPacket.getX(), clientboundAddEntityPacket.getY(), clientboundAddEntityPacket.getZ()).scale(1/8000.0D),
+                        clientboundAddEntityPacket.getYHeadRot()
+                    ));
+                    if(skinParts != null) {
+                        player.connection.send(new net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket(
+                            clientboundAddEntityPacket.getId(),
+                            List.of(new SynchedEntityData.DataItem<>(Player.DATA_PLAYER_MODE_CUSTOMISATION, (byte) skinParts.getRaw()).value())
+                        ));
+                    }
+                    return true;
+                }
+            }
+        }
+
+    public static boolean shouldSkip(Entity entity, EntityDataAccessor<?> dataAccessor) {
+        return switch (entity.getBukkitEntity().getDisguiseData()) {
+            case DisguiseData.OriginalDisguise original -> {
+                yield false;
+            }
+            case EntityTypeDisguise entityTypeDisguise -> !io.papermc.paper.entity.meta.EntityMetaWatcher.isValidForClass(
+                org.bukkit.craftbukkit.entity.CraftEntityType.bukkitToMinecraft(entityTypeDisguise.entityType()).getBaseClass(),
+                dataAccessor
+            );
+            case PlayerDisguise playerDisguise -> !io.papermc.paper.entity.meta.EntityMetaWatcher.isValidForClass(
+                ServerPlayer.class,
+                dataAccessor
+            );
+        };
+    }
+}
diff --git a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
index 58b602e550258c1062ee940bc46538dac95d8979..8ad90139bcfabd102f3ca7e9cbb49a0a2e85de7d 100644
--- a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
@@ -200,6 +200,7 @@ public class SynchedEntityData {
 
                 if (datawatcher_item.isDirty()) {
                     datawatcher_item.setDirty(false);
+                    if (com.github.weepingmc.disguise.DisguiseUtil.shouldSkip(entity, datawatcher_item.getAccessor())) continue; // Weeper - disguise api
                     if (list == null) {
                         list = new ArrayList();
                     }
@@ -224,7 +225,7 @@ public class SynchedEntityData {
 
         while (objectiterator.hasNext()) {
             SynchedEntityData.DataItem<?> datawatcher_item = (SynchedEntityData.DataItem) objectiterator.next();
-
+            if (com.github.weepingmc.disguise.DisguiseUtil.shouldSkip(entity, datawatcher_item.getAccessor())) continue; // Weeper - disguise api
             if (!datawatcher_item.isSetToDefault()) {
                 if (list == null) {
                     list = new ArrayList();
@@ -296,6 +297,7 @@ public class SynchedEntityData {
 
         List<SynchedEntityData.DataValue<?>> list = new ArrayList<>();
         for (DataItem<?> dataItem : this.itemsById.values()) {
+            if (com.github.weepingmc.disguise.DisguiseUtil.shouldSkip(entity, dataItem.getAccessor())) continue; // Weeper - disguise api
             list.add(dataItem.value());
         }
 
@@ -326,6 +328,7 @@ public class SynchedEntityData {
         List<SynchedEntityData.DataValue<?>> values = new ArrayList<>(keys.size());
         for (EntityDataAccessor<?> key : keys) {
             SynchedEntityData.DataItem<?> synchedValue = this.getItem(key);
+            if (com.github.weepingmc.disguise.DisguiseUtil.shouldSkip(entity, synchedValue.getAccessor())) continue; // Weeper - disguise api
             values.add(synchedValue.value());
         }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 529ab44baaf573b97cf7e89560c548642733188f..81dc19afb75f535b83c4625965d6be3419b46d42 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -301,7 +301,11 @@ public class ServerEntity {
         Packet<ClientGamePacketListener> packet = this.entity.getAddEntityPacket();
 
         this.yHeadRotp = Mth.floor(this.entity.getYHeadRot() * 256.0F / 360.0F);
-        sender.accept(packet);
+        // Weeper start - disguise api
+        if(!com.github.weepingmc.disguise.DisguiseUtil.tryDisguise(player, entity, (net.minecraft.network.protocol.game.ClientboundAddEntityPacket) packet)){
+            sender.accept(packet);
+        }
+        // Weeper end - disguise api
         if (this.trackedDataValues != null) {
             sender.accept(new ClientboundSetEntityDataPacket(this.entity.getId(), this.trackedDataValues));
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index deb75c82dc7e12986e90bb869250f9617f60877e..83dbfc70b7a4b9176b92c63024ed85bb1532b8fd 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -377,6 +381,12 @@ public final class CraftServer implements Server {
         return io.papermc.paper.util.TickThread.isTickThreadFor(((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandleRaw());
     }
     // Paper end - Folia reagion threading API
+    // Weeper start - add disguise api
+    @Override
+    public com.destroystokyo.paper.SkinParts.@org.jetbrains.annotations.NotNull Builder newSkinPartsBuilder() {
+        return new com.destroystokyo.paper.PaperSkinParts.Builder();
+    }
+    // Weeper end - add disguise api
 
     static {
         ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index e8e4489bcd64fde1b3226bdc7a7cc612508bda3f..247c7fbe3fb9f5fde530dae9f075748047b86edf 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1270,4 +1270,16 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return this.getHandle().getScoreboardName();
     }
     // Paper end - entity scoreboard name
+    // Weeper start - disguise api
+    private com.github.weepingmc.disguise.DisguiseData disguiseData = com.github.weepingmc.disguise.DisguiseData.original();
+    @Override
+    public @org.jetbrains.annotations.NotNull com.github.weepingmc.disguise.DisguiseData getDisguiseData() {
+        return disguiseData;
+    }
+
+    @Override
+    public void setDisuiseData(@org.jetbrains.annotations.NotNull com.github.weepingmc.disguise.DisguiseData disguiseData) {
+        this.disguiseData = disguiseData;
+    }
+    // Weeper end - disguise api
 }
