From a82b495248e9155659788b0da6dce5db635f274c Mon Sep 17 00:00:00 2001
From: Techcable <techcable@techcable.net>
Date: Sun, 20 Dec 2020 14:21:32 +0100
Subject: [PATCH] Fix hopper lag by making entities look for hoppers.

Every tick hoppers try and find an block-inventory to extract from.
If no tile entity is above the hopper (which there often isn't) it will
do a bounding box search for minecart chests and minecart hoppers.
If it can't find an inventory, it will then look for a dropped item,
which is another bounding box search.
This patch eliminates that expensive check by having dropped items and
minecart hoppers/chests look for hoppers instead.
Hoppers are tile entities meaning you can do a simple tile entity lookup
to find the nearest hopper in range.
Pushing out of hoppers causes a bouding box lookup, which this patch
replaces with a tile entity lookup.

This patch may causes a decrease in the performance of dropped items,
which is why it can be disabled in the configuration.

Co-authored-by: Yannick Lamprecht <yannicklamprecht@live.de>
---
 .../destroystokyo/paper/PaperWorldConfig.java |  5 ++
 .../java/io/papermc/paper/HopperHelper.java   | 26 +++++++
 .../java/io/papermc/paper/HopperPusher.java   | 71 +++++++++++++++++++
 .../java/net/minecraft/server/EntityItem.java | 13 +++-
 .../server/EntityMinecartContainer.java       | 24 ++++++-
 .../minecraft/server/TileEntityHopper.java    | 46 ++++++++++--
 6 files changed, 178 insertions(+), 7 deletions(-)
 create mode 100644 src/main/java/io/papermc/paper/HopperHelper.java
 create mode 100644 src/main/java/io/papermc/paper/HopperPusher.java

diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 0776e6834..33e5e1c71 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -804,4 +804,9 @@ public class PaperWorldConfig {
     private void setUpdatePathfindingOnBlockUpdate() {
         updatePathfindingOnBlockUpdate = getBoolean("update-pathfinding-on-block-update", this.updatePathfindingOnBlockUpdate);
     }
+
+    public boolean isHopperPushBased;
+    private void isHopperPushBased() {
+        isHopperPushBased = getBoolean("hopper.push-based", true);
+    }
 }
diff --git a/src/main/java/io/papermc/paper/HopperHelper.java b/src/main/java/io/papermc/paper/HopperHelper.java
new file mode 100644
index 000000000..b6ed59e80
--- /dev/null
+++ b/src/main/java/io/papermc/paper/HopperHelper.java
@@ -0,0 +1,26 @@
+package io.papermc.paper;
+
+import net.minecraft.server.BlockPosition;
+import net.minecraft.server.Blocks;
+import net.minecraft.server.IInventory;
+import net.minecraft.server.TileEntity;
+import net.minecraft.server.TileEntityHopper;
+import net.minecraft.server.World;
+
+public class HopperHelper {
+
+  public static TileEntityHopper getHopper(World world, BlockPosition pos) {
+    if (world.getType(pos).getBlock() != Blocks.HOPPER) {
+      return null;
+    }
+    TileEntity tileEntity = world.getTileEntity(pos);
+    if (tileEntity instanceof TileEntityHopper) {
+      return (TileEntityHopper) tileEntity;
+    }
+    return null;
+  }
+
+  public static IInventory getInventory(World world, BlockPosition position) {
+    return TileEntityHopper.a(world, position.getX(), position.getY(), position.getZ());
+  }
+}
diff --git a/src/main/java/io/papermc/paper/HopperPusher.java b/src/main/java/io/papermc/paper/HopperPusher.java
new file mode 100644
index 000000000..ad8ce0d48
--- /dev/null
+++ b/src/main/java/io/papermc/paper/HopperPusher.java
@@ -0,0 +1,71 @@
+package io.papermc.paper;
+
+import net.minecraft.server.AxisAlignedBB;
+import net.minecraft.server.BlockPosition;
+import net.minecraft.server.Entity;
+import net.minecraft.server.TileEntityHopper;
+import net.minecraft.server.World;
+
+public interface HopperPusher {
+
+    default TileEntityHopper findHopper() {
+        BlockPosition pos = new BlockPosition(locX(), locY(), locZ());
+        int startX = pos.getX() - 1;
+        int endX = pos.getX() + 1;
+        int startY = Math.max(0, pos.getY() - 1);
+        int endY = Math.min(255, pos.getY() + 1);
+        int startZ = pos.getZ() - 1;
+        int endZ = pos.getZ() + 1;
+        for (int x = startX; x <= endX; x++) {
+            for (int y = startY; y <= endY; y++) {
+                for (int z = startZ; z <= endZ; z++) {
+                    BlockPosition adjacentPos = new BlockPosition(x, y, z);
+                    TileEntityHopper hopper = HopperHelper.getHopper(getWorld(), adjacentPos);
+                    if (hopper == null) {
+                        continue; // Avoid playing with the bounding boxes, if at all possible
+                    }
+                    AxisAlignedBB hopperBoundingBox = hopper.getHopperLookupBoundingBox();
+                    if (hopperBoundingBox.intersects(this
+                        .getBoundingBox())) {
+                        return hopper;
+                    }
+                }
+            }
+        }
+        return null;
+    }
+
+    boolean acceptItem(TileEntityHopper hopper);
+
+
+    default boolean tryPutInHopper() {
+        if (!getWorld().paperConfig.isHopperPushBased) {
+            return false;
+        }
+        TileEntityHopper hopper = findHopper();
+        return hopper != null && hopper.canAcceptItems() && acceptItem(hopper);
+    }
+
+
+    AxisAlignedBB getBoundingBox();
+
+
+    World getWorld();
+
+    // Default implementations for entities
+
+
+    default double locX() {
+        return ((Entity) this).locX();
+    }
+
+
+    default double locY() {
+        return ((Entity) this).locY();
+    }
+
+
+    default double locZ() {
+        return ((Entity) this).locZ();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index f41aaa762..d9a10215e 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -12,7 +12,9 @@ import org.bukkit.event.player.PlayerPickupItemEvent;
 // CraftBukkit end
 import org.bukkit.event.player.PlayerAttemptPickupItemEvent; // Paper
 
-public class EntityItem extends Entity {
+import io.papermc.paper.HopperPusher; // Paper
+
+public class EntityItem extends Entity implements HopperPusher {
 
     private static final DataWatcherObject<ItemStack> ITEM = DataWatcher.a(EntityItem.class, DataWatcherRegistry.g);
     public int age;
@@ -42,6 +44,13 @@ public class EntityItem extends Entity {
         this.setItemStack(itemstack);
     }
 
+    // Paper start
+    @Override
+    public boolean acceptItem(TileEntityHopper hopper) {
+      return TileEntityHopper.a(hopper, this);
+    }
+    // Paper end
+
     @Override
     protected boolean playStepSound() {
         return false;
@@ -58,6 +67,7 @@ public class EntityItem extends Entity {
             this.die();
         } else {
             super.tick();
+            if (tryPutInHopper()) return; // Paper
             // CraftBukkit start - Use wall time for pickup and despawn timers
             int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
             if (this.pickupDelay != 32767) this.pickupDelay -= elapsedTicks;
@@ -151,6 +161,7 @@ public class EntityItem extends Entity {
     // Spigot start - copied from above
     @Override
     public void inactiveTick() {
+        if (tryPutInHopper()) return; // Paper
         // CraftBukkit start - Use wall time for pickup and despawn timers
         int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
         if (this.pickupDelay != 32767) this.pickupDelay -= elapsedTicks;
diff --git a/src/main/java/net/minecraft/server/EntityMinecartContainer.java b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
index 574838bd3..6d46cd472 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartContainer.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
@@ -8,9 +8,11 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.inventory.InventoryHolder;
+import io.papermc.paper.HopperPusher; // Paper
 // CraftBukkit end
 
-public abstract class EntityMinecartContainer extends EntityMinecartAbstract implements IInventory, ITileInventory {
+public abstract class EntityMinecartContainer extends EntityMinecartAbstract implements IInventory, ITileInventory,
+    HopperPusher {
 
     private NonNullList<ItemStack> items;
     private boolean c;
@@ -45,6 +47,26 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
         return null;
     }
 
+    // Paper start
+    @Override
+    public boolean acceptItem(TileEntityHopper hopper) {
+        return TileEntityHopper.acceptItem(hopper, this);
+    }
+
+    @Override
+    public void tick() {
+        super.tick();
+        tryPutInHopper();
+    }
+
+    @Override
+    public void inactiveTick() {
+        super.inactiveTick();
+        tryPutInHopper();
+    }
+    // Paper end
+
+
     @Override
     public int getMaxStackSize() {
         return maxStack;
diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index d432de40e..8f81c0911 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -14,6 +14,7 @@ import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryMoveItemEvent;
 import org.bukkit.event.inventory.InventoryPickupItemEvent;
 import org.bukkit.inventory.Inventory;
+import io.papermc.paper.HopperHelper; // Paper
 // CraftBukkit end
 
 public class TileEntityHopper extends TileEntityLootable implements IHopper, ITickable {
@@ -58,6 +59,12 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
         this.j = -1;
     }
 
+    // Paper start
+    public boolean canAcceptItems() {
+        return !this.m() && !this.j() && this.getBlock().get(BlockHopper.ENABLED);
+    }
+    // Paper end
+
     @Override
     public void load(IBlockData iblockdata, NBTTagCompound nbttagcompound) {
         super.load(iblockdata, nbttagcompound);
@@ -117,7 +124,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
                 boolean result = this.a(() -> {
                     return a((IHopper) this);
                 });
-                if (!result && this.world.spigotConfig.hopperCheck > 1) {
+                if (!result && this.world.spigotConfig.hopperCheck > 1 && !world.paperConfig.isHopperPushBased /* Paper */) {
                     this.setCooldown(this.world.spigotConfig.hopperCheck);
                 }
                 // Spigot end
@@ -322,13 +329,27 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
     }
     // Paper end
 
+    // Paper start
+    public AxisAlignedBB getHopperLookupBoundingBox() {
+        // Change this if b(IHopper) ever changes
+        return getHopperLookupBoundingBox(this.getX(), this.getY() + 1.0D, this.getZ());
+    }
+
+    private static AxisAlignedBB getHopperLookupBoundingBox(double d0, double d1, double d2) {
+        // Change this if the above ever changes
+        return new AxisAlignedBB(d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, d0 + 0.5D, d1 + 0.5D, d2 + 0.5D);
+    }
+ // Paper end
+
+
+
     private boolean k() {
-        IInventory iinventory = this.l();
+        IInventory iinventory = HopperHelper.getInventory(getWorld(), getPosition().shift((this.getBlock().get(BlockHopper.FACING)))); // Paper - use hopper helper
 
         if (iinventory == null) {
             return false;
         } else {
-            EnumDirection enumdirection = ((EnumDirection) this.getBlock().get(BlockHopper.FACING)).opposite();
+            EnumDirection enumdirection = ((EnumDirection) this.getBlock().get(BlockHopper.FACING)).opposite(); // Paper
 
             if (this.b(iinventory, enumdirection)) {
                 return false;
@@ -431,13 +452,27 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
     }
 
     public static boolean a(IHopper ihopper) {
-        IInventory iinventory = b(ihopper);
+        // Paper start
+        IInventory iinventory;
+        if (ihopper.getWorld().paperConfig.isHopperPushBased
+            && ihopper instanceof TileEntityHopper) {
+            BlockPosition pos = ((TileEntityHopper) ihopper).getPosition()
+                .up(); // Only pull from a above, because everything else comes to us
+            iinventory = HopperHelper.getInventory(ihopper.getWorld(), pos);
+        } else {
+            iinventory = b(ihopper); // Use old behavior for BB entity searching
+        }
+        return acceptItem(ihopper, iinventory);
+    }
 
+    public static boolean acceptItem(IHopper ihopper, IInventory iinventory) {
+    // Paper end
         if (iinventory != null) {
             EnumDirection enumdirection = EnumDirection.DOWN;
 
             // Paper start - optimize hoppers and remove streams
             skipPullModeEventFire = skipHopperEvents;
+
             return !c(iinventory, enumdirection) && anyMatch(iinventory, enumdirection, (item, i) -> {
                 // Logic copied from below to avoid extra getItem calls
                 if (!item.isEmpty() && canTakeItem(iinventory, item, i, enumdirection)) {
@@ -447,7 +482,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
                 }
             });
             // Paper end
-        } else {
+        } else if (!ihopper.getWorld().paperConfig.isHopperPushBased || !(ihopper instanceof TileEntityHopper)) { // Paper - only search for entities in 'pull mode'
             Iterator iterator = c(ihopper).iterator();
 
             EntityItem entityitem;
@@ -462,6 +497,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
 
             return true;
         }
+        return false; // Paper
     }
 
     private static boolean a(IHopper ihopper, IInventory iinventory, int i, EnumDirection enumdirection) {// Paper - method unused as logic is inlined above
-- 
2.30.0

