From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yannick Lamprecht <yannicklamprecht@live.de>
Date: Thu, 18 Jan 2024 21:14:00 +0100
Subject: [PATCH] add api to configure additional resourcepacks in
 configuration phase


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index da7b5ef5693e0bceb1719742f19def8e4e4ab8a3..4d2167276137bc955fc6213a7a0662433432bf0e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -14,6 +14,7 @@ import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.adventure.PaperAdventure;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import java.awt.image.BufferedImage;
@@ -34,6 +35,7 @@ import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Comparator;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
@@ -54,6 +56,7 @@ import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+import net.kyori.adventure.resource.ResourcePackInfo;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
 import net.minecraft.SharedConstants;
@@ -2907,4 +2910,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
     // Paper end
+
+    // Weeper start - configuration phase resource pack
+    public final Set<MinecraftServer.ServerResourcePackInfo> pluginServerResourcePacks = new HashSet<>();
+    public void configureNewResourcePack(ResourcePackInfo resourcePackInfo, boolean isRequired, net.kyori.adventure.text.Component component) {
+        this.pluginServerResourcePacks.add(new ServerResourcePackInfo(resourcePackInfo.id(), resourcePackInfo.uri().toString(), resourcePackInfo.hash(), isRequired, PaperAdventure.asVanilla(component)));
+    }
+    // Weeper start - configuration phase resource pack
 }
diff --git a/src/main/java/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
index cae10b963d153fb1777b18054796a45b2809342b..cc43a08a2fd0172a7e53e3ff6139441fec388dda 100644
--- a/src/main/java/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
@@ -85,7 +85,7 @@ public class ServerConfigurationPacketListenerImpl extends ServerCommonPacketLis
 
     private void addOptionalTasks() {
         this.server.getServerResourcePack().ifPresent((minecraftserver_serverresourcepackinfo) -> {
-            this.configurationTasks.add(new ServerResourcePackConfigurationTask(minecraftserver_serverresourcepackinfo));
+            this.configurationTasks.add(new ServerResourcePackConfigurationTask(minecraftserver_serverresourcepackinfo, this.server.pluginServerResourcePacks)); // Weeper - configuration phase resource pack
         });
     }
 
diff --git a/src/main/java/net/minecraft/server/network/config/ServerResourcePackConfigurationTask.java b/src/main/java/net/minecraft/server/network/config/ServerResourcePackConfigurationTask.java
index 173c9d6c12e0f9d6cef46813cc7effc558d0e145..58e7e0bf5edad6a027a15297e27b7baaff635bce 100644
--- a/src/main/java/net/minecraft/server/network/config/ServerResourcePackConfigurationTask.java
+++ b/src/main/java/net/minecraft/server/network/config/ServerResourcePackConfigurationTask.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.network.config;
 
+import java.util.Set;
 import java.util.function.Consumer;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.common.ClientboundResourcePackPushPacket;
@@ -9,14 +10,17 @@ import net.minecraft.server.network.ConfigurationTask;
 public class ServerResourcePackConfigurationTask implements ConfigurationTask {
     public static final ConfigurationTask.Type TYPE = new ConfigurationTask.Type("server_resource_pack");
     private final MinecraftServer.ServerResourcePackInfo info;
+    private final Set<MinecraftServer.ServerResourcePackInfo> pluginPacks; // Weeper - configuration phase resource pack
 
-    public ServerResourcePackConfigurationTask(MinecraftServer.ServerResourcePackInfo packProperties) {
+    public ServerResourcePackConfigurationTask(MinecraftServer.ServerResourcePackInfo packProperties, Set<MinecraftServer.ServerResourcePackInfo> pluginPacks) { // Weeper - configuration phase resource pack
         this.info = packProperties;
+        this.pluginPacks = pluginPacks; // Weeper - configuration phase resource pack
     }
 
     @Override
     public void start(Consumer<Packet<?>> sender) {
         sender.accept(new ClientboundResourcePackPushPacket(this.info.id(), this.info.url(), this.info.hash(), this.info.isRequired(), this.info.prompt()));
+        pluginPacks.forEach(resourcePack -> sender.accept(new ClientboundResourcePackPushPacket(resourcePack.id(), resourcePack.url(), resourcePack.hash(), resourcePack.isRequired(), resourcePack.prompt()))); // Weeper - configuration phase resource pack
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index f419fda3175a1f87d3365c183b2f8663547dbac3..7e2fb18ee27dfedb450abd416b4171521f6366eb 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -44,6 +44,8 @@ import java.util.logging.Logger;
 import java.util.stream.Collectors;
 import javax.imageio.ImageIO;
 // import jline.console.ConsoleReader;
+import net.kyori.adventure.resource.ResourcePackInfo;
+import net.kyori.adventure.text.Component;
 import net.minecraft.advancements.AdvancementHolder;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
@@ -254,6 +256,7 @@ import org.bukkit.scoreboard.Criteria;
 import org.bukkit.structure.StructureManager;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.jetbrains.annotations.NotNull;
 import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
@@ -386,6 +389,13 @@ public final class CraftServer implements Server {
     }
     // Weeper end - allow offline editing of playerData
 
+    // Weeper start - configuration phase resource pack
+    @Override
+    public void configureNewResourcePack(@NotNull ResourcePackInfo resourcePackInfo, boolean isRequired, @Nullable net.kyori.adventure.text.Component component) {
+        getHandle().getServer().configureNewResourcePack(resourcePackInfo, isRequired, component);
+    }
+    // Weeper end - configuration phase resource pack
+
     static {
         ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
         ConfigurationSerialization.registerClass(CraftPlayerProfile.class);
