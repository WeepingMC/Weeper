From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yannick Lamprecht <yannicklamprecht@live.de>
Date: Mon, 16 Oct 2023 19:48:03 +0200
Subject: [PATCH] modern player abilities


diff --git a/src/main/java/com/github/weepingmc/packet/CraftPacketConversion.java b/src/main/java/com/github/weepingmc/packet/CraftPacketConversion.java
index dc53aa2aa5b9613c6f99c6429e70b6e4d6047144..f1378ca7a65fa10e101be0a5ed79b1f080a8dbb9 100644
--- a/src/main/java/com/github/weepingmc/packet/CraftPacketConversion.java
+++ b/src/main/java/com/github/weepingmc/packet/CraftPacketConversion.java
@@ -1,20 +1,26 @@
 package com.github.weepingmc.packet;
 
-import java.util.ArrayList;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Set;
-
-import com.mojang.datafixers.util.Pair;
-
 import com.github.weepingmc.packet.options.Animation;
 import com.github.weepingmc.packet.options.EntityStatus;
 import com.github.weepingmc.packet.options.PlayerAbility;
 import com.github.weepingmc.packet.options.ProfileAction;
+import com.github.weepingmc.packet.options.abilities.FlySpeedAbility;
+import com.github.weepingmc.packet.options.abilities.WalkSpeedAbility;
+import com.mojang.datafixers.util.Pair;
+import java.util.ArrayList;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Set;
 import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.player.Abilities;
 import net.minecraft.world.item.ItemStack;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+
+import static com.github.weepingmc.packet.options.abilities.PlayerAbility.ALLOW_FLYING;
+import static com.github.weepingmc.packet.options.abilities.PlayerAbility.CREATIVE_MODE_INSTANT_BREAK;
+import static com.github.weepingmc.packet.options.abilities.PlayerAbility.FLYING;
+import static com.github.weepingmc.packet.options.abilities.PlayerAbility.INVULNERABLE;
 
 public final class CraftPacketConversion {
 
@@ -61,7 +67,7 @@ public final class CraftPacketConversion {
         EnumMap<org.bukkit.inventory.EquipmentSlot, org.bukkit.inventory.ItemStack> equipment) {
         List<Pair<EquipmentSlot, ItemStack>> pairList = new ArrayList<>();
         equipment.forEach((equipmentSlot, itemStack) -> {
-            pairList.add(new Pair<>(from(equipmentSlot), org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(itemStack)));
+            pairList.add(new Pair<>(from(equipmentSlot), CraftItemStack.asNMSCopy(itemStack)));
         });
         return pairList;
     }
@@ -95,7 +101,7 @@ public final class CraftPacketConversion {
         };
     }
 
-    static Abilities mapPlayerAbilities(Set<PlayerAbility> playerAbilities) {
+    static Abilities mapPlayerAbilitiesOld(Set<PlayerAbility> playerAbilities) {
         Abilities playerAbilitiesNMS = new Abilities();
 
         for (PlayerAbility playerAbilitiy : playerAbilities) {
@@ -108,4 +114,26 @@ public final class CraftPacketConversion {
         }
         return playerAbilitiesNMS;
     }
+
+    static Abilities mapPlayerAbilities(Set<com.github.weepingmc.packet.options.abilities.PlayerAbility> playerAbilities) {
+        Abilities playerAbilitiesNMS = new Abilities();
+        for (com.github.weepingmc.packet.options.abilities.PlayerAbility playerAbilitiy : playerAbilities) {
+            if (playerAbilitiy instanceof FlySpeedAbility flySpeedAbility) {
+                playerAbilitiesNMS.flyingSpeed = flySpeedAbility.speed();
+            } else if (playerAbilitiy instanceof WalkSpeedAbility fieldOfViewAbility) {
+                playerAbilitiesNMS.walkingSpeed = fieldOfViewAbility.speed();
+            } else if (playerAbilitiy == INVULNERABLE) {
+                playerAbilitiesNMS.invulnerable = true;
+            } else if (playerAbilitiy == FLYING) {
+                playerAbilitiesNMS.flying = true;
+            } else if (playerAbilitiy == ALLOW_FLYING) {
+                playerAbilitiesNMS.mayfly = true;
+            } else if (playerAbilitiy == CREATIVE_MODE_INSTANT_BREAK) {
+                playerAbilitiesNMS.instabuild = true;
+            } else {
+                throw new IllegalStateException("Unexpected value: " + playerAbilitiy);
+            }
+        }
+        return playerAbilitiesNMS;
+    }
 }
diff --git a/src/main/java/com/github/weepingmc/packet/CraftPacketStepBuilder.java b/src/main/java/com/github/weepingmc/packet/CraftPacketStepBuilder.java
index 311e94c1f0a3a2a81c2286981a2ef1bb4fa508ef..705089d71cb5af1f74a6e33cd6b6408c7210bc25 100644
--- a/src/main/java/com/github/weepingmc/packet/CraftPacketStepBuilder.java
+++ b/src/main/java/com/github/weepingmc/packet/CraftPacketStepBuilder.java
@@ -45,6 +45,7 @@ import java.util.stream.Collectors;
 
 import static com.github.weepingmc.packet.CraftPacketConversion.from;
 import static com.github.weepingmc.packet.CraftPacketConversion.mapPlayerAbilities;
+import static com.github.weepingmc.packet.CraftPacketConversion.mapPlayerAbilitiesOld;
 
 public class CraftPacketStepBuilder implements PacketStepBuilder {
 
@@ -261,14 +262,21 @@ public class CraftPacketStepBuilder implements PacketStepBuilder {
     }
 
     @Override
-    public PacketStepBuilder playerAbilities(@Nonnull Set<PlayerAbility> playerAbilities, float flySpeed, float fieldOfViewModifier) {
-        Abilities playerAbilitiesNMS = mapPlayerAbilities(playerAbilities);
+    public @NotNull PacketStepBuilder playerAbilities(@Nonnull Set<PlayerAbility> playerAbilities, float flySpeed, float fieldOfViewModifier) {
+        Abilities playerAbilitiesNMS = mapPlayerAbilitiesOld(playerAbilities);
         playerAbilitiesNMS.flyingSpeed = flySpeed;
         playerAbilitiesNMS.walkingSpeed = fieldOfViewModifier;
         initial.setNext(of(new ClientboundPlayerAbilitiesPacket(playerAbilitiesNMS)));
         return this;
     }
 
+    @Override
+    public @NotNull PacketStepBuilder withPlayerAbilities(@NotNull Set<com.github.weepingmc.packet.options.abilities.PlayerAbility> playerAbilities) {
+        Abilities playerAbilitiesNMS = mapPlayerAbilities(playerAbilities);
+        initial.setNext(of(new ClientboundPlayerAbilitiesPacket(playerAbilitiesNMS)));
+        return this;
+    }
+
     @Override
     public @NotNull PacketStepBuilder showTestMarker(@NotNull Location location, @NotNull Color color, @Nullable String text, int time) {
         var payload = new GameTestAddMarkerDebugPayload(
