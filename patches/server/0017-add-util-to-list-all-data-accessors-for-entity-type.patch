From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yannick Lamprecht <yannicklamprecht@live.de>
Date: Wed, 20 Dec 2023 22:19:04 +0100
Subject: [PATCH] add util to list all data accessors for entity type


diff --git a/build.gradle.kts b/build.gradle.kts
index 9d31221673d27718ed39bb604b1eceb3ded2303e..f291100e5cb02d125e5624cb683185d42677bdc3 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -69,6 +69,7 @@ dependencies {
     testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
     testImplementation("org.hamcrest:hamcrest:2.2")
     testImplementation("org.mockito:mockito-core:5.5.0")
+    testImplementation("org.junit.jupiter:junit-jupiter-params:5.10.0") // Weeper - allow parameterized test
 }
 
 val craftbukkitPackageVersion = "1_20_R3" // Paper
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java b/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java
index cfe6a6f6bcfd7a3b29ab25f5a6745d31c18f338d..6072889274965c047ebb95fc8cb1e3129a0ebb20 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java
@@ -130,7 +130,7 @@ public class MobGoalHelper {
 
     private static final BiMap<String, String> deobfuscationMap = HashBiMap.create();
     private static final Map<Class<? extends Goal>, Class<? extends Mob>> entityClassCache = new HashMap<>();
-    private static final Map<Class<? extends net.minecraft.world.entity.Mob>, Class<? extends Mob>> bukkitMap = new HashMap<>();
+    private static final Map<Class<? extends net.minecraft.world.entity.Mob>, Class<? extends Mob>> bukkitMap = new HashMap();
 
     static final Set<String> ignored = new HashSet<>();
 
diff --git a/src/main/java/com/github/weepingmc/util/EntityDataAccessorReflection.java b/src/main/java/com/github/weepingmc/util/EntityDataAccessorReflection.java
new file mode 100644
index 0000000000000000000000000000000000000000..5426206557290a992c380370f49c37a23a0557b4
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/util/EntityDataAccessorReflection.java
@@ -0,0 +1,401 @@
+package com.github.weepingmc.util;
+
+import com.google.common.collect.BiMap;
+import com.google.common.collect.HashBiMap;
+import io.papermc.paper.util.ObfHelper;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import net.minecraft.network.syncher.EntityDataAccessor;
+import net.minecraft.world.entity.AreaEffectCloud;
+import net.minecraft.world.entity.Display;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.ExperienceOrb;
+import net.minecraft.world.entity.GlowSquid;
+import net.minecraft.world.entity.Interaction;
+import net.minecraft.world.entity.LightningBolt;
+import net.minecraft.world.entity.Marker;
+import net.minecraft.world.entity.animal.Bee;
+import net.minecraft.world.entity.animal.Cat;
+import net.minecraft.world.entity.animal.Chicken;
+import net.minecraft.world.entity.animal.Cod;
+import net.minecraft.world.entity.animal.Cow;
+import net.minecraft.world.entity.animal.Dolphin;
+import net.minecraft.world.entity.animal.Fox;
+import net.minecraft.world.entity.animal.IronGolem;
+import net.minecraft.world.entity.animal.MushroomCow;
+import net.minecraft.world.entity.animal.Ocelot;
+import net.minecraft.world.entity.animal.Panda;
+import net.minecraft.world.entity.animal.Parrot;
+import net.minecraft.world.entity.animal.Pig;
+import net.minecraft.world.entity.animal.PolarBear;
+import net.minecraft.world.entity.animal.Rabbit;
+import net.minecraft.world.entity.animal.Salmon;
+import net.minecraft.world.entity.animal.Sheep;
+import net.minecraft.world.entity.animal.SnowGolem;
+import net.minecraft.world.entity.animal.Squid;
+import net.minecraft.world.entity.animal.TropicalFish;
+import net.minecraft.world.entity.animal.Turtle;
+import net.minecraft.world.entity.animal.Wolf;
+import net.minecraft.world.entity.animal.allay.Allay;
+import net.minecraft.world.entity.animal.axolotl.Axolotl;
+import net.minecraft.world.entity.animal.camel.Camel;
+import net.minecraft.world.entity.animal.frog.Frog;
+import net.minecraft.world.entity.animal.frog.Tadpole;
+import net.minecraft.world.entity.animal.goat.Goat;
+import net.minecraft.world.entity.animal.horse.Donkey;
+import net.minecraft.world.entity.animal.horse.Horse;
+import net.minecraft.world.entity.animal.horse.Llama;
+import net.minecraft.world.entity.animal.horse.Mule;
+import net.minecraft.world.entity.animal.horse.SkeletonHorse;
+import net.minecraft.world.entity.animal.horse.TraderLlama;
+import net.minecraft.world.entity.animal.horse.ZombieHorse;
+import net.minecraft.world.entity.boss.enderdragon.EndCrystal;
+import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
+import net.minecraft.world.entity.decoration.ArmorStand;
+import net.minecraft.world.entity.decoration.GlowItemFrame;
+import net.minecraft.world.entity.decoration.ItemFrame;
+import net.minecraft.world.entity.decoration.LeashFenceKnotEntity;
+import net.minecraft.world.entity.decoration.Painting;
+import net.minecraft.world.entity.item.FallingBlockEntity;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.entity.item.PrimedTnt;
+import net.minecraft.world.entity.monster.Blaze;
+import net.minecraft.world.entity.monster.CaveSpider;
+import net.minecraft.world.entity.monster.Creeper;
+import net.minecraft.world.entity.monster.Drowned;
+import net.minecraft.world.entity.monster.ElderGuardian;
+import net.minecraft.world.entity.monster.EnderMan;
+import net.minecraft.world.entity.monster.Endermite;
+import net.minecraft.world.entity.monster.Evoker;
+import net.minecraft.world.entity.monster.Ghast;
+import net.minecraft.world.entity.monster.Giant;
+import net.minecraft.world.entity.monster.Guardian;
+import net.minecraft.world.entity.monster.Husk;
+import net.minecraft.world.entity.monster.Illusioner;
+import net.minecraft.world.entity.monster.MagmaCube;
+import net.minecraft.world.entity.monster.Phantom;
+import net.minecraft.world.entity.monster.Pillager;
+import net.minecraft.world.entity.monster.Ravager;
+import net.minecraft.world.entity.monster.Shulker;
+import net.minecraft.world.entity.monster.Silverfish;
+import net.minecraft.world.entity.monster.Skeleton;
+import net.minecraft.world.entity.monster.Slime;
+import net.minecraft.world.entity.monster.Spider;
+import net.minecraft.world.entity.monster.Stray;
+import net.minecraft.world.entity.monster.Strider;
+import net.minecraft.world.entity.monster.Vex;
+import net.minecraft.world.entity.monster.Vindicator;
+import net.minecraft.world.entity.monster.Witch;
+import net.minecraft.world.entity.monster.WitherSkeleton;
+import net.minecraft.world.entity.monster.Zoglin;
+import net.minecraft.world.entity.monster.Zombie;
+import net.minecraft.world.entity.monster.ZombieVillager;
+import net.minecraft.world.entity.monster.ZombifiedPiglin;
+import net.minecraft.world.entity.monster.breeze.Breeze;
+import net.minecraft.world.entity.monster.piglin.Piglin;
+import net.minecraft.world.entity.monster.piglin.PiglinBrute;
+import net.minecraft.world.entity.monster.warden.Warden;
+import net.minecraft.world.entity.npc.Villager;
+import net.minecraft.world.entity.npc.WanderingTrader;
+import net.minecraft.world.entity.projectile.Arrow;
+import net.minecraft.world.entity.projectile.DragonFireball;
+import net.minecraft.world.entity.projectile.EvokerFangs;
+import net.minecraft.world.entity.projectile.EyeOfEnder;
+import net.minecraft.world.entity.projectile.FireworkRocketEntity;
+import net.minecraft.world.entity.projectile.FishingHook;
+import net.minecraft.world.entity.projectile.LargeFireball;
+import net.minecraft.world.entity.projectile.LlamaSpit;
+import net.minecraft.world.entity.projectile.ShulkerBullet;
+import net.minecraft.world.entity.projectile.SmallFireball;
+import net.minecraft.world.entity.projectile.Snowball;
+import net.minecraft.world.entity.projectile.SpectralArrow;
+import net.minecraft.world.entity.projectile.ThrownEgg;
+import net.minecraft.world.entity.projectile.ThrownEnderpearl;
+import net.minecraft.world.entity.projectile.ThrownExperienceBottle;
+import net.minecraft.world.entity.projectile.ThrownPotion;
+import net.minecraft.world.entity.projectile.ThrownTrident;
+import net.minecraft.world.entity.projectile.WindCharge;
+import net.minecraft.world.entity.projectile.WitherSkull;
+import net.minecraft.world.entity.vehicle.Boat;
+import net.minecraft.world.entity.vehicle.ChestBoat;
+import net.minecraft.world.entity.vehicle.Minecart;
+import net.minecraft.world.entity.vehicle.MinecartChest;
+import net.minecraft.world.entity.vehicle.MinecartCommandBlock;
+import net.minecraft.world.entity.vehicle.MinecartFurnace;
+import net.minecraft.world.entity.vehicle.MinecartHopper;
+import net.minecraft.world.entity.vehicle.MinecartSpawner;
+import net.minecraft.world.entity.vehicle.MinecartTNT;
+import org.bukkit.EntityMetaResult;
+import org.bukkit.entity.Bat;
+import org.bukkit.entity.EnderCrystal;
+import org.bukkit.entity.EnderSignal;
+import org.bukkit.entity.Enderman;
+import org.bukkit.entity.Firework;
+import org.bukkit.entity.FishHook;
+import org.bukkit.entity.PigZombie;
+import org.bukkit.entity.Player;
+import org.bukkit.entity.PufferFish;
+import org.bukkit.entity.Snowman;
+import org.bukkit.entity.TNTPrimed;
+import org.bukkit.entity.ThrownExpBottle;
+import org.bukkit.entity.Trident;
+import org.bukkit.entity.Wither;
+import org.bukkit.entity.minecart.CommandMinecart;
+import org.bukkit.entity.minecart.ExplosiveMinecart;
+import org.bukkit.entity.minecart.HopperMinecart;
+import org.bukkit.entity.minecart.PoweredMinecart;
+import org.bukkit.entity.minecart.RideableMinecart;
+import org.bukkit.entity.minecart.SpawnerMinecart;
+import org.bukkit.entity.minecart.StorageMinecart;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class EntityDataAccessorReflection {
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(EntityDataAccessorReflection.class);
+
+    static final BiMap<Class<? extends org.bukkit.entity.Entity>, Class<? extends Entity>> mapping = HashBiMap.create();
+    private static final Map<Class<? extends org.bukkit.entity.Entity>, Map<Integer, EntityMetaResult>> entityMetaResultCache = new ConcurrentHashMap<>();
+
+    static {
+        mapping.put(org.bukkit.entity.Item.class, ItemEntity.class);
+        mapping.put(org.bukkit.entity.ExperienceOrb.class, ExperienceOrb.class);
+        mapping.put(org.bukkit.entity.AreaEffectCloud.class, AreaEffectCloud.class);
+        mapping.put(org.bukkit.entity.ElderGuardian.class, ElderGuardian.class);
+        mapping.put(org.bukkit.entity.WitherSkeleton.class, WitherSkeleton.class);
+        mapping.put(org.bukkit.entity.Stray.class, Stray.class);
+        mapping.put(org.bukkit.entity.Egg.class, ThrownEgg.class);
+        mapping.put(org.bukkit.entity.LeashHitch.class, LeashFenceKnotEntity.class);
+        mapping.put(org.bukkit.entity.Painting.class, Painting.class);
+        mapping.put(org.bukkit.entity.Arrow.class, Arrow.class);
+        mapping.put(org.bukkit.entity.Snowball.class, Snowball.class);
+        mapping.put(org.bukkit.entity.LargeFireball.class, LargeFireball.class);
+        mapping.put(org.bukkit.entity.SmallFireball.class, SmallFireball.class);
+        mapping.put(org.bukkit.entity.EnderPearl.class, ThrownEnderpearl.class);
+        mapping.put(EnderSignal.class, EyeOfEnder.class);
+        mapping.put(org.bukkit.entity.ThrownPotion.class, ThrownPotion.class);
+        mapping.put(ThrownExpBottle.class, ThrownExperienceBottle.class);
+        mapping.put(org.bukkit.entity.ItemFrame.class, ItemFrame.class);
+        mapping.put(org.bukkit.entity.WitherSkull.class, WitherSkull.class);
+        mapping.put(TNTPrimed.class, PrimedTnt.class);
+        mapping.put(org.bukkit.entity.FallingBlock.class, FallingBlockEntity.class);
+        mapping.put(Firework.class, FireworkRocketEntity.class);
+        mapping.put(org.bukkit.entity.Husk.class, Husk.class);
+        mapping.put(org.bukkit.entity.SpectralArrow.class, SpectralArrow.class);
+        mapping.put(org.bukkit.entity.ShulkerBullet.class, ShulkerBullet.class);
+        mapping.put(org.bukkit.entity.DragonFireball.class, DragonFireball.class);
+        mapping.put(org.bukkit.entity.ZombieVillager.class, ZombieVillager.class);
+        mapping.put(org.bukkit.entity.SkeletonHorse.class, SkeletonHorse.class);
+        mapping.put(org.bukkit.entity.ZombieHorse.class, ZombieHorse.class);
+        mapping.put(org.bukkit.entity.ArmorStand.class, ArmorStand.class);
+        mapping.put(org.bukkit.entity.Donkey.class, Donkey.class);
+        mapping.put(org.bukkit.entity.Mule.class, Mule.class);
+        mapping.put(org.bukkit.entity.EvokerFangs.class, EvokerFangs.class);
+        mapping.put(org.bukkit.entity.Evoker.class, Evoker.class);
+        mapping.put(org.bukkit.entity.Vex.class, Vex.class);
+        mapping.put(org.bukkit.entity.Vindicator.class, Vindicator.class);
+        mapping.put(org.bukkit.entity.Illusioner.class, Illusioner.class);
+        mapping.put(CommandMinecart.class, MinecartCommandBlock.class);
+        mapping.put(org.bukkit.entity.Boat.class, Boat.class);
+        mapping.put(RideableMinecart.class, Minecart.class);
+        mapping.put(StorageMinecart.class, MinecartChest.class);
+        mapping.put(PoweredMinecart.class, MinecartFurnace.class);
+        mapping.put(ExplosiveMinecart.class, MinecartTNT.class);
+        mapping.put(HopperMinecart.class, MinecartHopper.class);
+        mapping.put(SpawnerMinecart.class, MinecartSpawner.class);
+        mapping.put(org.bukkit.entity.Creeper.class, Creeper.class);
+        mapping.put(org.bukkit.entity.Skeleton.class, Skeleton.class);
+        mapping.put(org.bukkit.entity.Spider.class, Spider.class);
+        mapping.put(org.bukkit.entity.Giant.class, Giant.class);
+        mapping.put(org.bukkit.entity.Zombie.class, Zombie.class);
+        mapping.put(org.bukkit.entity.Slime.class, Slime.class);
+        mapping.put(org.bukkit.entity.Ghast.class, Ghast.class);
+        mapping.put(PigZombie.class, ZombifiedPiglin.class);
+        mapping.put(Enderman.class, EnderMan.class);
+        mapping.put(org.bukkit.entity.CaveSpider.class, CaveSpider.class);
+        mapping.put(org.bukkit.entity.Silverfish.class, Silverfish.class);
+        mapping.put(org.bukkit.entity.Blaze.class, Blaze.class);
+        mapping.put(org.bukkit.entity.MagmaCube.class, MagmaCube.class);
+        mapping.put(org.bukkit.entity.EnderDragon.class, EnderDragon.class);
+        mapping.put(Wither.class, net.minecraft.world.entity.boss.wither.WitherBoss.class);
+        mapping.put(Bat.class, net.minecraft.world.entity.ambient.Bat.class);
+        mapping.put(org.bukkit.entity.Witch.class, Witch.class);
+        mapping.put(org.bukkit.entity.Endermite.class, Endermite.class);
+        mapping.put(org.bukkit.entity.Guardian.class, Guardian.class);
+        mapping.put(org.bukkit.entity.Shulker.class, Shulker.class);
+        mapping.put(org.bukkit.entity.Pig.class, Pig.class);
+        mapping.put(org.bukkit.entity.Sheep.class, Sheep.class);
+        mapping.put(org.bukkit.entity.Cow.class, Cow.class);
+        mapping.put(org.bukkit.entity.Chicken.class, Chicken.class);
+        mapping.put(org.bukkit.entity.Squid.class, Squid.class);
+        mapping.put(org.bukkit.entity.Wolf.class, Wolf.class);
+        mapping.put(org.bukkit.entity.MushroomCow.class, MushroomCow.class);
+        mapping.put(Snowman.class, SnowGolem.class);
+        mapping.put(org.bukkit.entity.Ocelot.class, Ocelot.class);
+        mapping.put(org.bukkit.entity.IronGolem.class, IronGolem.class);
+        mapping.put(org.bukkit.entity.Horse.class, Horse.class);
+        mapping.put(org.bukkit.entity.Rabbit.class, Rabbit.class);
+        mapping.put(org.bukkit.entity.PolarBear.class, PolarBear.class);
+        mapping.put(org.bukkit.entity.Llama.class, Llama.class);
+        mapping.put(org.bukkit.entity.LlamaSpit.class, LlamaSpit.class);
+        mapping.put(org.bukkit.entity.Parrot.class, Parrot.class);
+        mapping.put(org.bukkit.entity.Villager.class, Villager.class);
+        mapping.put(EnderCrystal.class, EndCrystal.class);
+        mapping.put(org.bukkit.entity.Turtle.class, Turtle.class);
+        mapping.put(org.bukkit.entity.Phantom.class, Phantom.class);
+        mapping.put(Trident.class, ThrownTrident.class);
+        mapping.put(org.bukkit.entity.Cod.class, Cod.class);
+        mapping.put(org.bukkit.entity.Salmon.class, Salmon.class);
+        mapping.put(PufferFish.class, net.minecraft.world.entity.animal.Pufferfish.class);
+        mapping.put(org.bukkit.entity.TropicalFish.class, TropicalFish.class);
+        mapping.put(org.bukkit.entity.Drowned.class, Drowned.class);
+        mapping.put(org.bukkit.entity.Dolphin.class, Dolphin.class);
+        mapping.put(org.bukkit.entity.Cat.class, Cat.class);
+        mapping.put(org.bukkit.entity.Panda.class, Panda.class);
+        mapping.put(org.bukkit.entity.Pillager.class, Pillager.class);
+        mapping.put(org.bukkit.entity.Ravager.class, Ravager.class);
+        mapping.put(org.bukkit.entity.TraderLlama.class, TraderLlama.class);
+        mapping.put(org.bukkit.entity.WanderingTrader.class, WanderingTrader.class);
+        mapping.put(org.bukkit.entity.Fox.class, Fox.class);
+        mapping.put(org.bukkit.entity.Bee.class, Bee.class);
+        mapping.put(org.bukkit.entity.Hoglin.class, net.minecraft.world.entity.monster.hoglin.Hoglin.class);
+        mapping.put(org.bukkit.entity.Piglin.class, Piglin.class);
+        mapping.put(org.bukkit.entity.Strider.class, Strider.class);
+        mapping.put(org.bukkit.entity.Zoglin.class, Zoglin.class);
+        mapping.put(org.bukkit.entity.PiglinBrute.class, PiglinBrute.class);
+        mapping.put(org.bukkit.entity.Axolotl.class, Axolotl.class);
+        mapping.put(org.bukkit.entity.GlowItemFrame.class, GlowItemFrame.class);
+        mapping.put(org.bukkit.entity.GlowSquid.class, GlowSquid.class);
+        mapping.put(org.bukkit.entity.Goat.class, Goat.class);
+        mapping.put(org.bukkit.entity.Marker.class, Marker.class);
+        mapping.put(org.bukkit.entity.Allay.class, Allay.class);
+        mapping.put(org.bukkit.entity.ChestBoat.class, ChestBoat.class);
+        mapping.put(org.bukkit.entity.Frog.class, Frog.class);
+        mapping.put(org.bukkit.entity.Tadpole.class, Tadpole.class);
+        mapping.put(org.bukkit.entity.Warden.class, Warden.class);
+        mapping.put(org.bukkit.entity.Camel.class, Camel.class);
+        mapping.put(org.bukkit.entity.BlockDisplay.class, Display.BlockDisplay.class);
+        mapping.put(org.bukkit.entity.Interaction.class, Interaction.class);
+        mapping.put(org.bukkit.entity.ItemDisplay.class, Display.ItemDisplay.class);
+        mapping.put(org.bukkit.entity.Sniffer.class, net.minecraft.world.entity.animal.sniffer.Sniffer.class);
+        mapping.put(org.bukkit.entity.TextDisplay.class, Display.TextDisplay.class);
+        mapping.put(org.bukkit.entity.Breeze.class, Breeze.class);
+        mapping.put(org.bukkit.entity.WindCharge.class, WindCharge.class);
+        mapping.put(org.bukkit.entity.FishHook.class, FishingHook.class);
+        mapping.put(org.bukkit.entity.LightningStrike.class, LightningBolt.class);
+        mapping.put(org.bukkit.entity.Player.class, net.minecraft.world.entity.player.Player.class);
+    }
+
+    public static Set<Class<? extends org.bukkit.entity.Entity>> getAvailableBukkitEntityClasses() {
+        return mapping.keySet();
+    }
+
+    public static <T extends org.bukkit.entity.Entity> Map<Integer, EntityMetaResult> getAllAccessors(Class<T> clazz) {
+        Map<Integer, EntityMetaResult> cachedResult = entityMetaResultCache.get(clazz);
+        if (cachedResult != null) {
+            return Map.copyOf(cachedResult);
+        }
+
+        Class<? extends net.minecraft.world.entity.Entity> nmsClass = mapping.get(clazz);
+        if (nmsClass == null) {
+            return Map.of();
+        }
+
+        if (net.minecraft.world.entity.Entity.class.isAssignableFrom(nmsClass)) {
+            Map<Integer, EntityMetaResult> result = EntityDataAccessorReflection.getAllAccessorsInternal(nmsClass);
+            entityMetaResultCache.put(clazz, result);
+            return Map.copyOf(result);
+        }
+        return Map.of();
+    }
+
+    private static <T extends Entity> Map<Integer, EntityMetaResult> getAllAccessorsInternal(Class<T> clazz) {
+        Map<Integer, EntityMetaResult> result = new HashMap<>();
+
+        List<Class<?>> allClasses = new ArrayList<>();
+        allClasses.add(clazz);
+        Class<?> current = clazz;
+        while (current.getSuperclass() != null) {
+            var toAdd = current.getSuperclass();
+            if (Entity.class.isAssignableFrom(toAdd)) {
+                allClasses.add(toAdd);
+            }
+            current = toAdd;
+        }
+
+        for (Class<?> specificEntityClass : allClasses) {
+            for (Field field : specificEntityClass.getDeclaredFields()) {
+                if (Modifier.isStatic(field.getModifiers()) && field.getType().isAssignableFrom(EntityDataAccessor.class)) {
+                    try {
+                        field.setAccessible(true);
+                        EntityDataAccessor<?> accessor = (EntityDataAccessor<?>) field.get(null);
+                        Type genericType = getGenericType(field);
+
+                        EntityMetaResult metaResult = null;
+                        if (genericType instanceof Class<?> typeClazz) {
+                            metaResult = add(specificEntityClass, typeClazz, null, accessor.getId());
+                        } else if (genericType instanceof ParameterizedType p) {
+                            metaResult = add(specificEntityClass, (Class<?>) p.getActualTypeArguments()[0], (Class<?>) p.getRawType(), accessor.getId());
+                        }
+
+                        if (metaResult != null) {
+                            result.put(accessor.getId(), metaResult);
+                        }
+                    } catch (IllegalAccessException e) {
+                        LOGGER.error("Field cannot be accessed", e);
+                    }
+                }
+            }
+        }
+
+        return result;
+    }
+
+    private static EntityMetaResult add(Class<?> entityClass, Class<?> accessorGenericType, Class<?> wrapperClass, int accessorId) {
+
+        String deobfName = ObfHelper.INSTANCE.deobfClassName(accessorGenericType.getName());
+
+        return new CraftEntityMetaResult(
+            accessorId,
+            entityClass,
+            accessorGenericType,
+            wrapperClass,
+            deobfName
+        );
+    }
+
+
+    public static Type getGenericType(Field field) {
+        return getGenericType(field, 0);
+    }
+
+    public static Type getGenericType(Field field, int argumentIndex) {
+        ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();
+        return parameterizedType.getActualTypeArguments()[argumentIndex];
+    }
+
+    public static Class<?> getGenericType(Class<?> clazz, int argumentIndex) {
+        ParameterizedType parameterizedType = (ParameterizedType) clazz.getGenericSuperclass();
+        return (Class<?>) parameterizedType.getActualTypeArguments()[argumentIndex];
+    }
+
+    public record CraftEntityMetaResult(
+        int accessorId,
+        Class<?> entityClass,
+        Class<?> accessorGenericType,
+        Class<?> wrapperClass,
+        String deobfedName
+    ) implements EntityMetaResult {
+        public boolean isTypeGenericItself() {
+            return wrapperClass != null;
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index ec2396f0e5d62b10450eaa7239a8c5479638b3c3..d62bcef289dedf644aa9701d7f543fea04e23972 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.util;
 
+import com.github.weepingmc.util.EntityDataAccessorReflection;
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMultimap;
@@ -18,6 +19,7 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import net.minecraft.SharedConstants;
@@ -41,6 +43,7 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.storage.LevelResource;
 import org.bukkit.Bukkit;
+import org.bukkit.EntityMetaResult;
 import org.bukkit.FeatureFlag;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
@@ -58,6 +61,7 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.legacy.CraftLegacy;
 import org.bukkit.craftbukkit.potion.CraftPotionType;
+import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.CreativeCategory;
 import org.bukkit.inventory.EquipmentSlot;
@@ -71,7 +75,8 @@ import org.bukkit.potion.PotionType;
 public final class CraftMagicNumbers implements UnsafeValues {
     public static final UnsafeValues INSTANCE = new CraftMagicNumbers();
 
-    private CraftMagicNumbers() {}
+    private CraftMagicNumbers() {
+    }
 
     // Paper start
     @Override
@@ -200,13 +205,16 @@ public final class CraftMagicNumbers implements UnsafeValues {
     public static ResourceLocation key(Material mat) {
         return CraftNamespacedKey.toMinecraft(mat.getKey());
     }
+
     // Paper start
     public static net.minecraft.world.entity.EntityType<?> getEntityTypes(org.bukkit.entity.EntityType type) {
         return ENTITY_TYPE_ENTITY_TYPES.get(type);
     }
+
     public static org.bukkit.entity.EntityType getEntityType(net.minecraft.world.entity.EntityType<?> entityTypes) {
         return ENTITY_TYPES_ENTITY_TYPE.get(entityTypes);
     }
+
     // Paper end
     // ========================================================================
     // Paper start
@@ -267,11 +275,11 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     /**
      * This string should be changed if the NMS mappings do.
-     *
+     * <p>
      * It has no meaning and should only be used as an equality check. Plugins
      * which are sensitive to the NMS mappings may read it and refuse to load if
      * it cannot be found or is different to the expected value.
-     *
+     * <p>
      * Remember: NMS is not supported API and may break at any time for any
      * reason irrespective of this. There is often supported API to do the same
      * thing as many common NMS usages. If not, you are encouraged to open a
@@ -453,6 +461,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
         net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(itemStack);
         return nmsItemStack.getItem().getDescriptionId(nmsItemStack);
     }
+
     // Paper start
     @Override
     public boolean isSupportedApiVersion(String apiVersion) {
@@ -469,7 +478,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     @Override
     public PotionType.InternalPotionData getInternalPotionData(NamespacedKey namespacedKey) {
         Potion potionRegistry = CraftRegistry.getMinecraftRegistry(Registries.POTION)
-                .getOptional(CraftNamespacedKey.toMinecraft(namespacedKey)).orElseThrow();
+            .getOptional(CraftNamespacedKey.toMinecraft(namespacedKey)).orElseThrow();
 
         return new CraftPotionType(namespacedKey, potionRegistry);
     }
@@ -521,7 +530,8 @@ public final class CraftMagicNumbers implements UnsafeValues {
         CompoundTag compound = deserializeNbtFromBytes(data);
         int dataVersion = compound.getInt("DataVersion");
         compound = ca.spottedleaf.dataconverter.minecraft.MCDataConverter.convertTag(ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry.ENTITY, compound, dataVersion, getDataVersion());
-        if (!preserveUUID) compound.remove("UUID"); // Generate a new UUID so we don't have to worry about deserializing the same entity twice
+        if (!preserveUUID)
+            compound.remove("UUID"); // Generate a new UUID so we don't have to worry about deserializing the same entity twice
         return net.minecraft.world.entity.EntityType.create(compound, ((org.bukkit.craftbukkit.CraftWorld) world).getHandle())
             .orElseThrow(() -> new IllegalArgumentException("An ID was not found for the data. Did you downgrade?")).getBukkitEntity();
     }
@@ -637,11 +647,25 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public String getStatisticCriteriaKey(org.bukkit.Statistic statistic) {
-        if (statistic.getType() != org.bukkit.Statistic.Type.UNTYPED) return "minecraft.custom:minecraft." + statistic.getKey().getKey();
+        if (statistic.getType() != org.bukkit.Statistic.Type.UNTYPED)
+            return "minecraft.custom:minecraft." + statistic.getKey().getKey();
         return org.bukkit.craftbukkit.CraftStatistic.getNMSStatistic(statistic).getName();
     }
     // Paper end
 
+    // Weeper start - entity data accessors
+
+    @Override
+    public Set<Class<? extends Entity>> getAvailableBukkitEntityClasses() {
+        return EntityDataAccessorReflection.getAvailableBukkitEntityClasses();
+    }
+
+    @Override
+    public <T extends Entity> Map<Integer, EntityMetaResult> getAllAccessors(Class<T> clazz) {
+        return EntityDataAccessorReflection.getAllAccessors(clazz);
+    }
+    // Weeper end - entity data accessors
+
     /**
      * This helper class represents the different NBT Tags.
      * <p>
diff --git a/src/test/java/com/github/weepingmc/util/EntityDataAccessorReflectionTest.java b/src/test/java/com/github/weepingmc/util/EntityDataAccessorReflectionTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..72a9200311310a1aa547c347ee98c4d254206c0b
--- /dev/null
+++ b/src/test/java/com/github/weepingmc/util/EntityDataAccessorReflectionTest.java
@@ -0,0 +1,42 @@
+package com.github.weepingmc.util;
+
+import java.util.Arrays;
+import java.util.Objects;
+import org.bukkit.entity.EntityType;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.EnumSource;
+
+import static java.util.function.Predicate.not;
+
+class EntityDataAccessorReflectionTest {
+
+    @ParameterizedTest
+    @EnumSource(
+        value = EntityType.class,
+        names = {"UNKNOWN",},
+        mode = EnumSource.Mode.EXCLUDE
+    )
+    public void checkAllEntityMappingsPresent(EntityType entityType) {
+        Assertions.assertTrue(
+            EntityDataAccessorReflection.mapping.containsKey(entityType.getEntityClass()),
+            "Missing mappings for " + entityType.getEntityClass().getSimpleName());
+    }
+
+
+    @Test
+    public void mappingGeneratorHelper() {
+        StringBuilder stringBuilder = new StringBuilder();
+        Arrays.stream(EntityType.values())
+            .filter(entityType -> entityType != EntityType.UNKNOWN)
+            .map(EntityType::getEntityClass)
+            .filter(not(EntityDataAccessorReflection.mapping::containsKey))
+            .filter(Objects::nonNull)
+            .forEach(entityClass -> {
+                stringBuilder.append("mapping.put(").append(entityClass.getSimpleName()).append(".class").append(", ").append(entityClass.getSimpleName()).append(".class").append(");").append("\n");
+            });
+        System.out.println(stringBuilder);
+    }
+
+}
