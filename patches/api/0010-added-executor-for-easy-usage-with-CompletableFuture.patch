From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yannick Lamprecht <yannicklamprecht@live.de>
Date: Sat, 6 Nov 2021 23:18:10 +0100
Subject: [PATCH] added executor for easy usage with CompletableFutures


diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
index cdf496598839380e073d7ccd89af473e9a702f00..a54a3fba9621ed85700aa3b8743650ee35068e0a 100644
--- a/src/main/java/org/bukkit/plugin/Plugin.java
+++ b/src/main/java/org/bukkit/plugin/Plugin.java
@@ -2,12 +2,14 @@ package org.bukkit.plugin;
 
 import java.io.File;
 import java.io.InputStream;
+import java.util.concurrent.Executor;
 import java.util.logging.Logger;
 import org.bukkit.Server;
 import org.bukkit.command.TabExecutor;
 import org.bukkit.configuration.file.FileConfiguration;
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.ChunkGenerator;
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -106,6 +108,22 @@ public interface Plugin extends TabExecutor {
     @NotNull
     public Server getServer();
 
+    // Weeper start - executors
+    /**
+     * Returns an executor of the mainthread
+     * @return executor
+     */
+    @NotNull
+    Executor mainThreadExecutor();
+
+    /**
+     * Returns an async executor
+     * @return executor
+     */
+    @NonNull
+    Executor asyncExecutor();
+    // Weeper stop - executors
+
     /**
      * Returns a value indicating whether or not this plugin is currently
      * enabled
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 3bea5dd67ad0393160ccede4ac99a3c7baa1803b..56aa89aed26c54874f846bd55d66b556e920ec7f 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -12,6 +12,7 @@ import java.io.Reader;
 import java.net.URL;
 import java.net.URLConnection;
 import java.util.List;
+import java.util.concurrent.Executor;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import org.bukkit.Server;
@@ -26,6 +27,7 @@ import org.bukkit.plugin.PluginBase;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.PluginLogger;
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -95,6 +97,18 @@ public abstract class JavaPlugin extends PluginBase {
         return server;
     }
 
+    // Weeper start - executors
+    @Override
+    public @NotNull Executor mainThreadExecutor() {
+        return (runnable) -> getServer().getScheduler().runTask(this, runnable);
+    }
+
+    @Override
+    public @NonNull Executor asyncExecutor() {
+        return (runnable) -> getServer().getScheduler().runTaskAsynchronously(this, runnable);
+    }
+    // Weeper stop - executors
+
     /**
      * Returns a value indicating whether or not this plugin is currently
      * enabled
diff --git a/src/test/java/org/bukkit/plugin/TestPlugin.java b/src/test/java/org/bukkit/plugin/TestPlugin.java
index a8be3e23e3e280ad301d9530de50028515612966..443591e86e39eda270968cce9ade44cc341f5dde 100644
--- a/src/test/java/org/bukkit/plugin/TestPlugin.java
+++ b/src/test/java/org/bukkit/plugin/TestPlugin.java
@@ -1,14 +1,18 @@
 package org.bukkit.plugin;
 
-import java.io.File;
-import java.io.InputStream;
-import java.util.List;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.configuration.file.FileConfiguration;
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.ChunkGenerator;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+import java.io.InputStream;
+import java.util.List;
+import java.util.concurrent.Executor;
 
 public class TestPlugin extends PluginBase {
     private boolean enabled = true;
@@ -78,6 +82,16 @@ public class TestPlugin extends PluginBase {
         throw new UnsupportedOperationException("Not supported.");
     }
 
+    @Override
+    public @NotNull Executor mainThreadExecutor() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public @NonNull Executor asyncExecutor() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
     @Override
     public boolean isEnabled() {
         return enabled;
