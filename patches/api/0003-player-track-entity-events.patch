From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yannick Lamprecht <yannicklamprecht@live.de>
Date: Sat, 19 Jun 2021 15:21:49 +0200
Subject: [PATCH] player track entity events


diff --git a/src/main/java/com/github/weepingmc/event/packet/PlayerTrackEntityEvent.java b/src/main/java/com/github/weepingmc/event/packet/PlayerTrackEntityEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..ca949d2a50e0ef35442bf33a6cb8e122aaa080ee
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/event/packet/PlayerTrackEntityEvent.java
@@ -0,0 +1,66 @@
+package com.github.weepingmc.event.packet;
+
+import com.github.weepingmc.disguise.DisguiseData;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Is called before a {@link Player} tracks an {@link Entity}.
+ *
+ * E.g. can be used for the following:
+ *
+ * <ul>
+ *     <li>Hiding all kind of entities by calling {@link Cancellable#setCancelled(boolean)} with value true</li>
+ *     <li>Disguising entities as others e.g. player npc.
+ *         Cancel the event and replace it with a playerpacket with the same entity id.
+ *     </li>
+ * </ul>
+ * @deprecated for entity disguising use {@link Entity#setDisuiseData(DisguiseData)}
+ * for cancellation {@link io.papermc.paper.event.player.PlayerTrackEntityEvent}
+ */
+@Deprecated
+public class PlayerTrackEntityEvent extends PlayerEvent implements Cancellable {
+
+    private static final HandlerList handlers = new HandlerList();
+    private final Entity entity;
+    private boolean cancelled;
+
+    public PlayerTrackEntityEvent(@NotNull Player player, @NotNull Entity entity) {
+        super(player);
+        this.entity = entity;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    /**
+     * Gets the entity that will be tracked
+     * @return the entity tracked
+     */
+    @NotNull
+    public Entity getEntity() {
+        return entity;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+}
diff --git a/src/main/java/com/github/weepingmc/event/packet/PlayerUntrackEntityEvent.java b/src/main/java/com/github/weepingmc/event/packet/PlayerUntrackEntityEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..a51e8daa03f1f4b453fd2f2793988fa966c58d97
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/event/packet/PlayerUntrackEntityEvent.java
@@ -0,0 +1,57 @@
+package com.github.weepingmc.event.packet;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Is called before a {@link Player} untracks an {@link Entity}.
+ * @deprecated use {@link io.papermc.paper.event.player.PlayerUntrackEntityEvent}
+ */
+@Deprecated
+public class PlayerUntrackEntityEvent extends PlayerEvent {
+
+    private static final HandlerList handlers = new HandlerList();
+    private final Entity entity;
+    private final long entityId;
+
+    public PlayerUntrackEntityEvent(@NotNull Player player, long entityId, @Nullable Entity entity) {
+        super(player);
+        this.entity = entity;
+        this.entityId = entityId;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    /**
+     * Gets the entity that will be untracked
+     * @return the entity untracked or null if entity is already removed
+     */
+    @Nullable
+    public Entity getEntity() {
+        return entity;
+    }
+
+    /**
+     * Returns the entity id that gets despawned
+     *
+     * @return entity id
+     */
+    public long getEntityId(){
+        return entityId;
+    }
+}
