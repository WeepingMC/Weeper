From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yannick Lamprecht <yannicklamprecht@live.de>
Date: Wed, 27 Dec 2023 14:51:59 +0100
Subject: [PATCH] add disguise api


diff --git a/src/main/java/com/destroystokyo/paper/SkinParts.java b/src/main/java/com/destroystokyo/paper/SkinParts.java
index 4a0c39405d4fbed457787e3c6ded4cc6591bc8c2..c4cc74b95bd1a8378c53a6dee68875991a68bec6 100644
--- a/src/main/java/com/destroystokyo/paper/SkinParts.java
+++ b/src/main/java/com/destroystokyo/paper/SkinParts.java
@@ -17,4 +17,15 @@ public interface SkinParts {
     boolean hasHatsEnabled();
 
     int getRaw();
+
+    interface Builder {
+        @org.jetbrains.annotations.NotNull Builder withCape(boolean cape);
+        @org.jetbrains.annotations.NotNull Builder withJacket(boolean jacket);
+        @org.jetbrains.annotations.NotNull Builder withLeftSleeve(boolean leftSleeve);
+        @org.jetbrains.annotations.NotNull Builder withRightSleeve(boolean rightSleeve);
+        @org.jetbrains.annotations.NotNull Builder withLeftPants(boolean leftPants);
+        @org.jetbrains.annotations.NotNull Builder withRightPants(boolean rightPants);
+        @org.jetbrains.annotations.NotNull Builder withHat(boolean hat);
+        @org.jetbrains.annotations.NotNull SkinParts build();
+    }
 }
diff --git a/src/main/java/io/papermc/paper/disguise/DisguiseData.java b/src/main/java/io/papermc/paper/disguise/DisguiseData.java
new file mode 100644
index 0000000000000000000000000000000000000000..3bcc252eac8b47eae54d2dff976eec95670a90d3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/disguise/DisguiseData.java
@@ -0,0 +1,61 @@
+package io.papermc.paper.disguise;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Represents the data used to disguise an entity as another.
+ * Also supports disguising an entity as a player commonly known as `FakePlayer`.
+ */
+public sealed interface DisguiseData permits DisguiseData.OriginalDisguise, EntityTypeDisguise, PlayerDisguise {
+
+    /**
+     * Creates an original disguise data that can be used to reset disguising.
+     * <p>
+     * The original instance is set by default when a new entity is spawned
+     * and represents the state of no disguise should be made.
+     * <p>
+     * Same as {@link #reset()}
+     *
+     * @return an original disguise data
+     */
+    static @NotNull DisguiseData original() {
+        return reset();
+    }
+
+    /**
+     * Creates a {@link PlayerDisguise.Builder} where you can configure certain properties of the fake player appearance.
+     *
+     *
+     * @param playerProfile a already completed player profile that will be the fake players skin
+     * @return a builder to configure certain attributes
+     */
+    static @NotNull PlayerDisguise.Builder player(@NotNull PlayerProfile playerProfile) {
+        return new PlayerDisguise.Builder(playerProfile);
+    }
+
+    /**
+     * Creates a {@link EntityTypeDisguise} to allow disguising your entity as the given {@link EntityType}.
+     *
+     *
+     * @param entityType the entity type as which the entity should appear as.
+     * @return an entity disguise
+     */
+    static @NotNull EntityTypeDisguise entity(@NotNull EntityType entityType) {
+        return new EntityTypeDisguise(entityType);
+    }
+
+    /**
+     * An alias for {@link #original()} to cover certain views on it.
+     *
+     * @see #original()
+     *
+     * @return an original disguise data
+     */
+    static @NotNull OriginalDisguise reset() {
+        return new OriginalDisguise();
+    }
+
+    record OriginalDisguise() implements DisguiseData{}
+}
diff --git a/src/main/java/io/papermc/paper/disguise/EntityTypeDisguise.java b/src/main/java/io/papermc/paper/disguise/EntityTypeDisguise.java
new file mode 100644
index 0000000000000000000000000000000000000000..7f63227b1b8bf1e8c98e71979feeeb47bcda0d8b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/disguise/EntityTypeDisguise.java
@@ -0,0 +1,13 @@
+package io.papermc.paper.disguise;
+
+import java.util.Objects;
+import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Internal
+public record EntityTypeDisguise(@NotNull EntityType entityType) implements DisguiseData {
+    public EntityTypeDisguise {
+        Objects.requireNonNull(entityType, "type cannot be null");
+    }
+}
diff --git a/src/main/java/io/papermc/paper/disguise/PlayerDisguise.java b/src/main/java/io/papermc/paper/disguise/PlayerDisguise.java
new file mode 100644
index 0000000000000000000000000000000000000000..24afc6a26d9b19c647a55d80e845fa9adcf07a63
--- /dev/null
+++ b/src/main/java/io/papermc/paper/disguise/PlayerDisguise.java
@@ -0,0 +1,63 @@
+package io.papermc.paper.disguise;
+
+import com.destroystokyo.paper.SkinParts;
+import com.destroystokyo.paper.profile.PlayerProfile;
+import java.util.Objects;
+import org.bukkit.Server;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+@ApiStatus.Internal
+public record PlayerDisguise(@NotNull PlayerProfile playerProfile, boolean listed, @Nullable SkinParts skinParts) implements DisguiseData {
+
+    public  PlayerDisguise {
+        Objects.requireNonNull(playerProfile, "profile cannot be null");
+    }
+    public static @NotNull Builder builder(@NotNull PlayerProfile playerProfile) {
+        return new Builder(playerProfile);
+    }
+
+    /**
+     * Represents the builder to configure certain appearance settings.
+     */
+    public static class Builder {
+        private final PlayerProfile playerProfile;
+        private boolean listed;
+        private SkinParts skinParts;
+
+        @ApiStatus.Internal
+        public Builder(@NotNull PlayerProfile playerProfile) {
+            this.playerProfile = playerProfile;
+        }
+
+        /**
+         * Defines if the fake player will be shown in player list.
+         *
+         * @param listed true, if the player should be listed else false
+         * @return the builder instance
+         */
+        public @NotNull Builder listed(boolean listed) {
+            this.listed = listed;
+            return this;
+        }
+
+        /**
+         *  Defines which skin parts should be enabled for the fake player.
+         *  <p>
+         *  Use {@link Server#newSkinPartsBuilder()} to get a fresh builder instance for configuration.
+         *
+         * @param skinParts the skin parts that should be shown.
+         * @return the builder instance
+         */
+        public @NotNull Builder skinParts(@NotNull SkinParts skinParts) {
+            this.skinParts = skinParts;
+            return this;
+        }
+
+        @ApiStatus.Internal
+        public @NotNull PlayerDisguise build() {
+            return new PlayerDisguise(playerProfile, listed, skinParts);
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 0614bd7e2d658172a7765925adf81b75b5620f11..7df3353c8ee4bf5a8e6505771455df07a2c68e56 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -2546,4 +2546,11 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      */
     boolean isOwnedByCurrentRegion(@NotNull Entity entity);
     // Paper end - Folia region threading API
+    // Paper start - add disguise api
+    /**
+     * Creates a new skinparts builder used for overriding skin settings
+     * @return a new builder for skin parts
+     */
+    com.destroystokyo.paper.SkinParts.@NotNull Builder newSkinPartsBuilder();
+    // Paper end - add disguise api
 }
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 725ef320f929d5e3d141c1ed3246d73a7d741f31..d159839f3ddcb01d295d12b8562aff529d74d9a3 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1159,4 +1159,34 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      */
     @NotNull String getScoreboardEntryName();
     // Paper end - entity scoreboard name
+    // Paper start - disguise api
+
+    /**
+     * Gets the current {@link io.papermc.paper.disguise.DisguiseData} of the entity.
+     *
+     * @return {@link io.papermc.paper.disguise.DisguiseData.OriginalDisguise} if entity is not disguised.
+     * Otherwise, one of {@link io.papermc.paper.disguise.EntityTypeDisguise} or {@link io.papermc.paper.disguise.PlayerDisguise}
+     */
+    @NotNull io.papermc.paper.disguise.DisguiseData getDisguiseData();
+
+    /**
+     * Sets the current {@link io.papermc.paper.disguise.DisguiseData} of the entity.
+     * <p>
+     * Following {@link io.papermc.paper.disguise.DisguiseData} can be set:
+     * <ul>
+     *     <li>{@link io.papermc.paper.disguise.PlayerDisguise} use {@link io.papermc.paper.disguise.DisguiseData#player(com.destroystokyo.paper.profile.PlayerProfile)}.
+     *     It returns a builder where you are able to configure additional settings</li>
+     *     <li>{@link io.papermc.paper.disguise.EntityTypeDisguise} use {@link io.papermc.paper.disguise.DisguiseData#entity(EntityType)}</li>
+     *     <li>{@link io.papermc.paper.disguise.DisguiseData.OriginalDisguise} use {@link io.papermc.paper.disguise.DisguiseData#original()} or {@link io.papermc.paper.disguise.DisguiseData#reset()} to reset it again to the original state</li>
+     * </ul>
+     * <p>
+     * The following entities are not supported:
+     * <ul>
+     *     <li>{@link ExperienceOrb}</li>
+     * </ul>
+     *
+     * @param disguiseData the {@link io.papermc.paper.disguise.DisguiseData} that will be set.
+     */
+    void setDisguiseData(@NotNull io.papermc.paper.disguise.DisguiseData disguiseData);
+    // Paper end - disguise api
 }
