--- a/paper-server/build.gradle.kts
+++ b/paper-server/build.gradle.kts
@@ -1,11 +_,16 @@
 import io.papermc.paperweight.attribute.DevBundleOutput
-import io.papermc.paperweight.util.*
+import io.papermc.paperweight.util.Git
+import io.papermc.paperweight.util.path
+import io.papermc.paperweight.util.upstreamsDirectory
+import org.gradle.kotlin.dsl.dir
+import org.gradle.kotlin.dsl.register
 import java.time.Instant
 
 plugins {
     `java-library`
     `maven-publish`
     id("io.papermc.paperweight.core")
+    idea // Weeper - server generator changes
 }
 
 val paperMavenPublicUrl = "https://repo.papermc.io/repository/maven-public/"
@@ -21,6 +_,21 @@
     // macheOldPath = file("F:\\Projects\\PaperTooling\\mache\\versions\\1.21.4\\src\\main\\java")
     // gitFilePatches = true
 
+    val fork = forks.register("weeper") {
+        upstream.patchDir("paperServer") {
+            upstreamPath = "paper-server"
+            excludes = setOf("src/minecraft", "patches", "build.gradle.kts")
+            patchesDir = rootDirectory.dir("weeper-server/paper-patches")
+            outputDir = rootDirectory.dir("paper-server")
+        }
+    }
+
+    activeFork = fork
+
+    paper {
+        paperServerDir = upstreamsDirectory().map { it.dir("paper/paper-server") }
+    }
+
     spigot {
         buildDataRef = "3edaf46ec1eed4115ce1b18d2846cded42577e42"
         packageVersion = "v1_21_R3" // also needs to be updated in MappingEnvironment
@@ -101,7 +_,36 @@
     }
 }
 
-val log4jPlugins = sourceSets.create("log4jPlugins")
+// Weeper start - api generator changes
+val generatedServerPath: java.nio.file.Path =
+    layout.projectDirectory.dir("../weeper-server/src/generated/java").asFile.toPath()
+idea {
+    module {
+        generatedSourceDirs.add(generatedServerPath.toFile())
+    }
+}
+// Weeper end - api generator changes
+
+sourceSets {
+    main {
+        // Weeper start - api generator changes
+        java {
+            srcDir("../paper-server/src/main/java")
+            srcDir(generatedServerPath)
+        }
+        // Weeper end - api generator changes
+        resources { srcDir("../paper-server/src/main/resources") }
+    }
+    test {
+        java { srcDir("../paper-server/src/test/java") }
+        resources { srcDir("../paper-server/src/test/resources") }
+    }
+}
+
+val log4jPlugins = sourceSets.create("log4jPlugins") {
+    java { srcDir("../paper-server/src/log4jPlugins/java") }
+}
+
 configurations.named(log4jPlugins.compileClasspathConfigurationName) {
     extendsFrom(configurations.compileClasspath.get())
 }
@@ -119,7 +_,7 @@
 }
 
 dependencies {
-    implementation(project(":paper-api"))
+    implementation(project(":weeper-api"))
     implementation("ca.spottedleaf:concurrentutil:0.0.3")
     implementation("org.jline:jline-terminal-ffm:3.27.1") // use ffm on java 22+
     implementation("org.jline:jline-terminal-jni:3.27.1") // fall back to jni on java 21
@@ -188,14 +_,14 @@
         val gitBranch = git.exec(providers, "rev-parse", "--abbrev-ref", "HEAD").get().trim()
         attributes(
             "Main-Class" to "org.bukkit.craftbukkit.Main",
-            "Implementation-Title" to "Paper",
+            "Implementation-Title" to "Weeper", // Weeper - rebranding
             "Implementation-Version" to implementationVersion,
             "Implementation-Vendor" to date,
-            "Specification-Title" to "Paper",
+            "Specification-Title" to "Weeper", // Weeper - rebranding
             "Specification-Version" to project.version,
-            "Specification-Vendor" to "Paper Team",
-            "Brand-Id" to "papermc:paper",
-            "Brand-Name" to "Paper",
+            "Specification-Vendor" to "WeepingMC Team", // WeepingMC - rebranding
+            "Brand-Id" to "weepingmc:weeper", // Weeper - rebranding
+            "Brand-Name" to "Weeper", // Weeper - rebranding
             "Build-Number" to (build ?: ""),
             "Build-Time" to buildTime.toString(),
             "Git-Branch" to gitBranch,
@@ -326,3 +_,16 @@
     classpath(tasks.createReobfPaperclipJar.flatMap { it.outputZip })
     mainClass.set(null as String?)
 }
+
+// Weeper start - api generator changes
+val scanJarForOldGeneratedCode =
+    tasks.register("scanJarForOldGeneratedCode", io.papermc.paperweight.tasks.ScanJarForOldGeneratedCode::class) {
+        mcVersion.set(providers.gradleProperty("mcVersion"))
+        annotation.set("Lio/papermc/paper/generated/GeneratedFrom;")
+        jarToScan.set(tasks.jar.flatMap { it.archiveFile })
+        classpath.from(configurations.compileClasspath)
+    }
+tasks.check {
+    dependsOn(scanJarForOldGeneratedCode)
+}
+// Weeper end - api generator changes
