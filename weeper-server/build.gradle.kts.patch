--- a/paper-server/build.gradle.kts
+++ b/paper-server/build.gradle.kts
@@ -1,11 +_,14 @@
 import io.papermc.paperweight.attribute.DevBundleOutput
-import io.papermc.paperweight.util.*
+import io.papermc.paperweight.util.Git
+import io.papermc.paperweight.util.path
+import io.papermc.paperweight.util.upstreamsDirectory
 import java.time.Instant
 
 plugins {
     `java-library`
     `maven-publish`
     id("io.papermc.paperweight.core")
+    idea // Weeper - server generator changes
 }
 
 val paperMavenPublicUrl = "https://repo.papermc.io/repository/maven-public/"
@@ -21,8 +_,19 @@
     // macheOldPath = file("F:\\Projects\\PaperTooling\\mache\\versions\\1.21.4\\src\\main\\java")
     // gitFilePatches = true
 
+    val fork = forks.register("weeper") {
+        upstream.patchDir("paperServer") {
+            upstreamPath = "paper-server"
+            excludes = setOf("src/minecraft", "patches", "build.gradle.kts")
+            patchesDir = rootDirectory.dir("weeper-server/paper-patches")
+            outputDir = rootDirectory.dir("paper-server")
+        }
+    }
+
+    activeFork = fork
+
     paper {
-        reobfMappingsPatch = layout.projectDirectory.file("../build-data/reobf-mappings-patch.tiny")
+        paperServerDir = upstreamsDirectory().map { it.dir("paper/paper-server") }
     }
 
     spigot {
@@ -57,6 +_,7 @@
     @get:Inject
     abstract val archiveOperations: ArchiveOperations
 }
+
 val services = objects.newInstance<Services>()
 
 if (project.providers.gradleProperty("publishDevBundle").isPresent) {
@@ -105,7 +_,35 @@
     }
 }
 
-val log4jPlugins = sourceSets.create("log4jPlugins")
+// Weeper start - api generator changes
+val generatedServerPath: java.nio.file.Path =
+    rootProject.projectDir.toPath().resolve("weeper-server-generator/generated")
+idea {
+    module {
+        generatedSourceDirs.add(generatedServerPath.toFile())
+    }
+}
+// Weeper end - api generator changes
+
+sourceSets {
+    main {
+        // Weeper start - api generator changes
+        java {
+            srcDir("../paper-server/src/main/java")
+            srcDir(generatedServerPath)
+        }
+        // Weeper end - api generator changes
+        resources { srcDir("../paper-server/src/main/resources") }
+    }
+    test {
+        java { srcDir("../paper-server/src/test/java") }
+        resources { srcDir("../paper-server/src/test/resources") }
+    }
+}
+
+val log4jPlugins = sourceSets.create("log4jPlugins") {
+    java { srcDir("../paper-server/src/log4jPlugins/java") }
+}
 configurations.named(log4jPlugins.compileClasspathConfigurationName) {
     extendsFrom(configurations.compileClasspath.get())
 }
@@ -113,17 +_,16 @@
 
 // Configure mockito agent that is needed in newer java versions
 val mockitoAgent = configurations.register("mockitoAgent")
+
 abstract class MockitoAgentProvider : CommandLineArgumentProvider {
     @get:CompileClasspath
     abstract val fileCollection: ConfigurableFileCollection
 
-    override fun asArguments(): Iterable<String> {
-        return listOf("-javaagent:" + fileCollection.files.single().absolutePath)
-    }
+    override fun asArguments() = listOf("-javaagent:" + fileCollection.files.single().absolutePath)
 }
 
 dependencies {
-    implementation(project(":paper-api"))
+    implementation(project(":weeper-api"))
     implementation("ca.spottedleaf:concurrentutil:0.0.2")
     implementation("org.jline:jline-terminal-ffm:3.27.1") // use ffm on java 22+
     implementation("org.jline:jline-terminal-jni:3.27.1") // fall back to jni on java 21
@@ -162,7 +_,9 @@
     testImplementation("org.junit.platform:junit-platform-suite-engine:1.10.0")
     testImplementation("org.hamcrest:hamcrest:2.2")
     testImplementation("org.mockito:mockito-core:5.14.1")
-    mockitoAgent("org.mockito:mockito-core:5.14.1") { isTransitive = false } // Configure mockito agent that is needed in newer java versions
+    mockitoAgent("org.mockito:mockito-core:5.14.1") {
+        isTransitive = false
+    } // Configure mockito agent that is needed in newer java versions
     testImplementation("org.ow2.asm:asm-tree:9.7.1")
     testImplementation("org.junit-pioneer:junit-pioneer:2.2.0") // CartesianTest
 
@@ -192,14 +_,14 @@
         val gitBranch = git.exec(providers, "rev-parse", "--abbrev-ref", "HEAD").get().trim()
         attributes(
             "Main-Class" to "org.bukkit.craftbukkit.Main",
-            "Implementation-Title" to "Paper",
+            "Implementation-Title" to "Weeper", // Weeper - rebranding
             "Implementation-Version" to implementationVersion,
             "Implementation-Vendor" to date,
-            "Specification-Title" to "Paper",
+            "Specification-Title" to "Weeper", // Weeper - rebranding
             "Specification-Version" to project.version,
-            "Specification-Vendor" to "Paper Team",
-            "Brand-Id" to "papermc:paper",
-            "Brand-Name" to "Paper",
+            "Specification-Vendor" to "WeepingMC Team", // WeepingMC - rebranding
+            "Brand-Id" to "weepingmc:weeper", // Weeper - rebranding
+            "Brand-Name" to "Weeper", // Weeper - rebranding
             "Build-Number" to (build ?: ""),
             "Build-Time" to buildTime.toString(),
             "Git-Branch" to gitBranch,
@@ -255,7 +_,7 @@
 
 fun TaskContainer.registerRunTask(
     name: String,
-    block: JavaExec.() -> Unit
+    block: JavaExec.() -> Unit,
 ): TaskProvider<JavaExec> = register<JavaExec>(name) {
     group = "runs"
     mainClass.set("org.bukkit.craftbukkit.Main")
@@ -330,3 +_,16 @@
     classpath(tasks.createReobfPaperclipJar.flatMap { it.outputZip })
     mainClass.set(null as String?)
 }
+
+// Weeper start - api generator changes
+val scanJarForOldGeneratedCode =
+    tasks.register("scanJarForOldGeneratedCode", io.papermc.paperweight.tasks.ScanJarForOldGeneratedCode::class) {
+        mcVersion.set(providers.gradleProperty("mcVersion"))
+        annotation.set("Lio/papermc/paper/generated/GeneratedFrom;")
+        jarToScan.set(tasks.jar.flatMap { it.archiveFile })
+        classpath.from(configurations.compileClasspath)
+    }
+tasks.check {
+    dependsOn(scanJarForOldGeneratedCode)
+}
+// Weeper end - api generator changes
