--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -112,7 +_,8 @@
     private static final int SEND_PLAYER_INFO_INTERVAL = 600;
     private static final SimpleDateFormat BAN_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z");
     private final MinecraftServer server;
-    public final List<ServerPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
+    public final List<ServerPlayer> players = new java.util.concurrent.CopyOnWriteArrayList<>(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
+    private final Map<UUID, ServerPlayer> offlineEditedPlayers = new java.util.concurrent.ConcurrentHashMap<>(); // Weeper allow offline editing of playerData
     private final Map<UUID, ServerPlayer> playersByUUID = Maps.newHashMap();
     private final UserBanList bans = new UserBanList(USERBANLIST_FILE);
     private final IpBanList ipBans = new IpBanList(IPBANLIST_FILE);
@@ -629,7 +_,17 @@
         // depending on the outcome.
         SocketAddress socketAddress = loginlistener.connection.getRemoteAddress();
 
-        ServerPlayer entity = new ServerPlayer(this.server, this.server.getLevel(Level.OVERWORLD), gameProfile, ClientInformation.createDefault());
+        // Weeper start - allow offline editing of playerData
+        ServerPlayer entity = offlineEditedPlayers.remove(gameProfile.getId());
+        if(entity != null) {
+            // saves data edited by offline player editing mechanic
+            // server itself should load the playerdata some time later
+            entity.gameProfile = gameProfile; // set original game profile to so we do not end up with a lot of empty name player.
+            entity.getBukkitEntity().saveData();
+        } else {
+            entity = new ServerPlayer(this.server, this.server.getLevel(Level.OVERWORLD), gameProfile, ClientInformation.createDefault());
+        }
+        // Weeper end - allow offline editing of playerData
         entity.transferCookieConnection = loginlistener;
         org.bukkit.entity.Player player = entity.getBukkitEntity();
         org.bukkit.event.player.PlayerLoginEvent event = new org.bukkit.event.player.PlayerLoginEvent(player, loginlistener.connection.hostname, ((java.net.InetSocketAddress) socketAddress).getAddress(), ((java.net.InetSocketAddress) loginlistener.connection.channel.remoteAddress()).getAddress());
@@ -1403,4 +_,31 @@
     public boolean isAllowCommandsForAllPlayers() {
         return this.allowCommandsForAllPlayers;
     }
+    // Weeper start - allow offline editing of playerData
+    public void editOfflinePlayer(GameProfile gameprofile, java.util.function.Consumer<com.github.weepingmc.offline.EditPlayer> editPlayerConsumer) {
+        ServerPlayer serverPlayer = playersByUUID.get(gameprofile.getId());
+
+        if(serverPlayer == null) {
+            serverPlayer = offlineEditedPlayers.get(gameprofile.getId());
+        }
+        if(serverPlayer == null) {
+            serverPlayer = new ServerPlayer(
+                    this.server,
+                    this.server.getLevel(Level.OVERWORLD),
+                    gameprofile,
+                    ClientInformation.createDefault()
+            );
+            var target = serverPlayer.getBukkitEntity();
+            target.loadData();
+            offlineEditedPlayers.put(gameprofile.getId(), serverPlayer);
+        }
+        // ensure cleanup if user fucks something up
+        try {
+            editPlayerConsumer.accept(new com.github.weepingmc.offline.CraftEditPlayer(serverPlayer));
+        } finally {
+            serverPlayer.getBukkitEntity().saveData();
+            offlineEditedPlayers.remove(gameprofile.getId());
+        }
+    }
+    // Weeper end - allow offline editing of playerData
 }
